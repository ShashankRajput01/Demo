{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "22d10fbd-b6fe-4f96-8e96-ea38087e0f1b",
      "metadata": {
        "id": "22d10fbd-b6fe-4f96-8e96-ea38087e0f1b"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3575cbe0-0453-41a0-82b8-8698d7a5d032",
      "metadata": {
        "id": "3575cbe0-0453-41a0-82b8-8698d7a5d032"
      },
      "outputs": [],
      "source": [
        "#import os\n",
        "\n",
        "#current_directory = os.getcwd()\n",
        "#print(\"Current Working Directory:\", current_directory)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4f325c38-26a9-4b8f-8380-2e8034af3aa9",
      "metadata": {
        "id": "4f325c38-26a9-4b8f-8380-2e8034af3aa9"
      },
      "outputs": [],
      "source": [
        "#import os\n",
        "\n",
        "# Replace '/path/to/your/desired/directory' with the actual path\n",
        "#desired_directory = r\"C:\\Users\\Shashank Puttha\\New Project\\rossmann-store-sales\"\n",
        "\n",
        "# Change the current working directory\n",
        "#os.chdir(desired_directory)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e6de2f17-bf79-4f43-b63a-901b0145293f",
      "metadata": {
        "id": "e6de2f17-bf79-4f43-b63a-901b0145293f"
      },
      "outputs": [],
      "source": [
        "#import os\n",
        "\n",
        "#current_directory = os.getcwd()\n",
        "#print(\"Current Working Directory:\", current_directory)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "33671a11-0940-4d36-8d5c-f451bbed5ce7",
      "metadata": {
        "id": "33671a11-0940-4d36-8d5c-f451bbed5ce7",
        "outputId": "57d18b29-5f88-43d6-9bbc-7a90a1f2b12d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The Shape of train data :  (1017209, 9)\n",
            "The Shape of test data :  (41088, 8)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-16-c6f0fe2ac58c>:1: DtypeWarning: Columns (7) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  train=pd.read_csv(\"train.csv\")\n"
          ]
        }
      ],
      "source": [
        "train=pd.read_csv(\"train.csv\")\n",
        "test=pd.read_csv(\"test.csv\")\n",
        "\n",
        "print(\"The Shape of train data : \",train.shape)\n",
        "print(\"The Shape of test data : \",test.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7ca29175-aba2-4ff5-bd37-26c3425b45a7",
      "metadata": {
        "id": "7ca29175-aba2-4ff5-bd37-26c3425b45a7",
        "outputId": "4e3657b8-f650-4427-970c-5e91ce8bd236",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
              "0      1          5  2015-07-31   5263        555     1      1            0   \n",
              "1      2          5  2015-07-31   6064        625     1      1            0   \n",
              "2      3          5  2015-07-31   8314        821     1      1            0   \n",
              "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
              "4      5          5  2015-07-31   4822        559     1      1            0   \n",
              "\n",
              "   SchoolHoliday  \n",
              "0              1  \n",
              "1              1  \n",
              "2              1  \n",
              "3              1  \n",
              "4              1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-70014d0b-d02d-4e12-a623-b98728e72124\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5263</td>\n",
              "      <td>555</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6064</td>\n",
              "      <td>625</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8314</td>\n",
              "      <td>821</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>13995</td>\n",
              "      <td>1498</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>4822</td>\n",
              "      <td>559</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70014d0b-d02d-4e12-a623-b98728e72124')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-70014d0b-d02d-4e12-a623-b98728e72124 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-70014d0b-d02d-4e12-a623-b98728e72124');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-60e3fe2c-33ba-45b4-9142-47edf8a4c87b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-60e3fe2c-33ba-45b4-9142-47edf8a4c87b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-60e3fe2c-33ba-45b4-9142-47edf8a4c87b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "train.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d5708913-0c6f-4cb7-a453-76fc1ce1b0cb",
      "metadata": {
        "id": "d5708913-0c6f-4cb7-a453-76fc1ce1b0cb",
        "outputId": "64ffac6f-95be-4d01-f5b6-32be0d405cca",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1017209 entries, 0 to 1017208\n",
            "Data columns (total 9 columns):\n",
            " #   Column         Non-Null Count    Dtype \n",
            "---  ------         --------------    ----- \n",
            " 0   Store          1017209 non-null  int64 \n",
            " 1   DayOfWeek      1017209 non-null  int64 \n",
            " 2   Date           1017209 non-null  object\n",
            " 3   Sales          1017209 non-null  int64 \n",
            " 4   Customers      1017209 non-null  int64 \n",
            " 5   Open           1017209 non-null  int64 \n",
            " 6   Promo          1017209 non-null  int64 \n",
            " 7   StateHoliday   1017209 non-null  object\n",
            " 8   SchoolHoliday  1017209 non-null  int64 \n",
            "dtypes: int64(7), object(2)\n",
            "memory usage: 69.8+ MB\n"
          ]
        }
      ],
      "source": [
        "train.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cf24fe2d-548a-41fd-923e-5a2c79caaddd",
      "metadata": {
        "id": "cf24fe2d-548a-41fd-923e-5a2c79caaddd",
        "outputId": "37f42df5-c6fa-42e5-d222-ba48c5aab988",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Store  DayOfWeek   Date  Sales  Customers   Open  Promo  \\\n",
              "0        False      False  False  False      False  False  False   \n",
              "1        False      False  False  False      False  False  False   \n",
              "2        False      False  False  False      False  False  False   \n",
              "3        False      False  False  False      False  False  False   \n",
              "4        False      False  False  False      False  False  False   \n",
              "...        ...        ...    ...    ...        ...    ...    ...   \n",
              "1017204  False      False  False  False      False  False  False   \n",
              "1017205  False      False  False  False      False  False  False   \n",
              "1017206  False      False  False  False      False  False  False   \n",
              "1017207  False      False  False  False      False  False  False   \n",
              "1017208  False      False  False  False      False  False  False   \n",
              "\n",
              "         StateHoliday  SchoolHoliday  \n",
              "0               False          False  \n",
              "1               False          False  \n",
              "2               False          False  \n",
              "3               False          False  \n",
              "4               False          False  \n",
              "...               ...            ...  \n",
              "1017204         False          False  \n",
              "1017205         False          False  \n",
              "1017206         False          False  \n",
              "1017207         False          False  \n",
              "1017208         False          False  \n",
              "\n",
              "[1017209 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c5c9557a-fd87-4c8c-bbaf-4b822ec88ef3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1017204</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1017205</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1017206</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1017207</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1017208</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1017209 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c5c9557a-fd87-4c8c-bbaf-4b822ec88ef3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c5c9557a-fd87-4c8c-bbaf-4b822ec88ef3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c5c9557a-fd87-4c8c-bbaf-4b822ec88ef3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-87f51910-5b76-43bf-9485-db8a6bbefcca\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-87f51910-5b76-43bf-9485-db8a6bbefcca')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-87f51910-5b76-43bf-9485-db8a6bbefcca button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "train.isnull()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7ce78ba0-6bf1-4762-a598-9555a06ff45d",
      "metadata": {
        "id": "7ce78ba0-6bf1-4762-a598-9555a06ff45d",
        "outputId": "e86aa32c-0bf5-4da5-ef98-c62312f016d2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Store     DayOfWeek         Sales     Customers          Open  \\\n",
              "count  1.017209e+06  1.017209e+06  1.017209e+06  1.017209e+06  1.017209e+06   \n",
              "mean   5.584297e+02  3.998341e+00  5.773819e+03  6.331459e+02  8.301067e-01   \n",
              "std    3.219087e+02  1.997391e+00  3.849926e+03  4.644117e+02  3.755392e-01   \n",
              "min    1.000000e+00  1.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n",
              "25%    2.800000e+02  2.000000e+00  3.727000e+03  4.050000e+02  1.000000e+00   \n",
              "50%    5.580000e+02  4.000000e+00  5.744000e+03  6.090000e+02  1.000000e+00   \n",
              "75%    8.380000e+02  6.000000e+00  7.856000e+03  8.370000e+02  1.000000e+00   \n",
              "max    1.115000e+03  7.000000e+00  4.155100e+04  7.388000e+03  1.000000e+00   \n",
              "\n",
              "              Promo  SchoolHoliday  \n",
              "count  1.017209e+06   1.017209e+06  \n",
              "mean   3.815145e-01   1.786467e-01  \n",
              "std    4.857586e-01   3.830564e-01  \n",
              "min    0.000000e+00   0.000000e+00  \n",
              "25%    0.000000e+00   0.000000e+00  \n",
              "50%    0.000000e+00   0.000000e+00  \n",
              "75%    1.000000e+00   0.000000e+00  \n",
              "max    1.000000e+00   1.000000e+00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0996c82a-8282-4332-8563-1146ed23f2d5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1.017209e+06</td>\n",
              "      <td>1.017209e+06</td>\n",
              "      <td>1.017209e+06</td>\n",
              "      <td>1.017209e+06</td>\n",
              "      <td>1.017209e+06</td>\n",
              "      <td>1.017209e+06</td>\n",
              "      <td>1.017209e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5.584297e+02</td>\n",
              "      <td>3.998341e+00</td>\n",
              "      <td>5.773819e+03</td>\n",
              "      <td>6.331459e+02</td>\n",
              "      <td>8.301067e-01</td>\n",
              "      <td>3.815145e-01</td>\n",
              "      <td>1.786467e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.219087e+02</td>\n",
              "      <td>1.997391e+00</td>\n",
              "      <td>3.849926e+03</td>\n",
              "      <td>4.644117e+02</td>\n",
              "      <td>3.755392e-01</td>\n",
              "      <td>4.857586e-01</td>\n",
              "      <td>3.830564e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.800000e+02</td>\n",
              "      <td>2.000000e+00</td>\n",
              "      <td>3.727000e+03</td>\n",
              "      <td>4.050000e+02</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>5.580000e+02</td>\n",
              "      <td>4.000000e+00</td>\n",
              "      <td>5.744000e+03</td>\n",
              "      <td>6.090000e+02</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.380000e+02</td>\n",
              "      <td>6.000000e+00</td>\n",
              "      <td>7.856000e+03</td>\n",
              "      <td>8.370000e+02</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.115000e+03</td>\n",
              "      <td>7.000000e+00</td>\n",
              "      <td>4.155100e+04</td>\n",
              "      <td>7.388000e+03</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0996c82a-8282-4332-8563-1146ed23f2d5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0996c82a-8282-4332-8563-1146ed23f2d5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0996c82a-8282-4332-8563-1146ed23f2d5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2f15d44e-34f1-4673-995b-47ec9d986594\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2f15d44e-34f1-4673-995b-47ec9d986594')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2f15d44e-34f1-4673-995b-47ec9d986594 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "train.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "74f219b0-0ad1-4a3c-b4a4-813d761ad6c7",
      "metadata": {
        "id": "74f219b0-0ad1-4a3c-b4a4-813d761ad6c7",
        "outputId": "1abd6c77-1330-4ebf-f953-19b82fc64412",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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aCWKiYkxOrFap9MVuykcVUxMEIiInoGLi4t+/kFBQQGOHDmCtm3b6s///fffkgmAluDs2bNo1KiRpN3Hxwfnzp2TISKyVEwQiIieQdeuXRETE4O9e/di3LhxqFKlCl599VX9+WPHjqF+/foyRmicg4OD0d0dz507h6pVq8oQEVkqJghERM9g6tSpqFSpEgIDA/Hdd9/hu+++g7W1tf78999/j06dOskYoXFvvvkmRo4cifPnz+vbzp07h+joaPTo0UPGyMjScJIiEdE/cPfuXdjZ2cHKysqgPTs7G3Z2dgZJgyW4e/cuOnfujN9++w0vvPACAODq1at47bXXsH79ejg6OsobIFkMJghERBWMEALbtm1Deno6bG1t0axZM4PhESKAQwxERBVCamoqNm3aBODR9tCdOnVCrVq1MHPmTISFhWHIkCHQarUyR0mWhAkCEVEFMGXKFJw8eVL/9fHjxzF48GC8/vrriImJwcaNGxEXFydjhGRpOMRARFQBKHVjJ5IPKwhERBWAUjd2IvkwQSAiqgCUurETyYcJAhFRBaDUjZ1IPnzcMxFRBTB16lT07NkTgYGBsLOzw9KlSxWxsRPJh5MUiYgqEKVt7ETyYYJAREREEpyDQERERBJMEIiIiEiCCQIRERFJMEEgIiIiCSYIREREJMEEgYiIiCSYIBAREZEEEwQiIiKS+H/PdMG01felxwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Heatmap\n",
        "\n",
        "sns.heatmap(train.isnull(),yticklabels=False,cmap=\"viridis\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9cea8fe5-d4ca-4403-8dde-5ae54a63e873",
      "metadata": {
        "id": "9cea8fe5-d4ca-4403-8dde-5ae54a63e873"
      },
      "source": [
        "# Task 1 - Exploration of customer purchasing behaviour\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0ab32d26-bc28-403b-af98-44e5f59c9908",
      "metadata": {
        "id": "0ab32d26-bc28-403b-af98-44e5f59c9908",
        "outputId": "8d71c123-37fe-497c-c638-2764347619cc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
              "0      1          5  2015-07-31   5263        555     1      1            0   \n",
              "1      2          5  2015-07-31   6064        625     1      1            0   \n",
              "2      3          5  2015-07-31   8314        821     1      1            0   \n",
              "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
              "4      5          5  2015-07-31   4822        559     1      1            0   \n",
              "\n",
              "   SchoolHoliday  \n",
              "0              1  \n",
              "1              1  \n",
              "2              1  \n",
              "3              1  \n",
              "4              1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3c9d9f28-8c58-4b1d-ade3-1c7012c3c776\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5263</td>\n",
              "      <td>555</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6064</td>\n",
              "      <td>625</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8314</td>\n",
              "      <td>821</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>13995</td>\n",
              "      <td>1498</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>4822</td>\n",
              "      <td>559</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c9d9f28-8c58-4b1d-ade3-1c7012c3c776')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3c9d9f28-8c58-4b1d-ade3-1c7012c3c776 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3c9d9f28-8c58-4b1d-ade3-1c7012c3c776');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fe5ae1d0-ff68-458a-9727-faf47597e6c3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fe5ae1d0-ff68-458a-9727-faf47597e6c3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fe5ae1d0-ff68-458a-9727-faf47597e6c3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "df=train.copy()\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "954cf399-b797-4112-a810-5602aafe2d53",
      "metadata": {
        "id": "954cf399-b797-4112-a810-5602aafe2d53"
      },
      "source": [
        "### Check for distribution in both training and test sets - are the promotions distributed similarly between these two groups?\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "74cd9269-4aa0-4f96-98d7-a61714fc4e88",
      "metadata": {
        "id": "74cd9269-4aa0-4f96-98d7-a61714fc4e88",
        "outputId": "afa1e62e-bb6e-4ee4-894d-3784209beb8e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training set promotion distribution:\n",
            "Series([], Name: Promo, dtype: float64)\n",
            "Test set promotion distribution:\n",
            "Series([], Name: Promo, dtype: float64)\n"
          ]
        }
      ],
      "source": [
        "training_dist = df[df['Sales'] == 'training'][\"Promo\"].value_counts(normalize=True)\n",
        "test_dist = df[df['Sales'] == 'test'][\"Promo\"].value_counts(normalize=True)\n",
        "\n",
        "print(\"Training set promotion distribution:\")\n",
        "print(training_dist)\n",
        "\n",
        "print(\"Test set promotion distribution:\")\n",
        "print(test_dist)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f238a14b-09f8-4731-9dfb-d59cd6023578",
      "metadata": {
        "id": "f238a14b-09f8-4731-9dfb-d59cd6023578"
      },
      "source": [
        "### Check & compare sales behavior before, during and after holidays\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "28df62ad-ec60-4f27-83a4-ca9bb184eaac",
      "metadata": {
        "id": "28df62ad-ec60-4f27-83a4-ca9bb184eaac"
      },
      "outputs": [],
      "source": [
        "before_holiday_start = '2015-07-20'\n",
        "before_holiday_end = '2023-07-26'\n",
        "\n",
        "during_holiday_start = '2015-07-26' # holiday\n",
        "during_holiday_end = '2015-07-27'\n",
        "\n",
        "after_holiday_start = '2015-07-27'\n",
        "\n",
        "#break the dates in before ,during, and after holidays\n",
        "before_holiday_data = train[(train['Date'] >= before_holiday_start) & (train['Date'] < during_holiday_start)]\n",
        "during_holiday_data = train[(train['Date'] >= during_holiday_start) & (train['Date'] < during_holiday_end)]\n",
        "after_holiday_data = train[train['Date'] >= after_holiday_start]\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "05628a25-9939-417c-a8d6-5e029bb0e1fa",
      "metadata": {
        "id": "05628a25-9939-417c-a8d6-5e029bb0e1fa",
        "outputId": "13b60625-6039-4a7c-e714-0ba1cd121dd0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Store  DayOfWeek        Date  Sales  Customers  Open  Promo  \\\n",
              "6690       1          6  2015-07-25   4364        500     1      0   \n",
              "6691       2          6  2015-07-25   2512        316     1      0   \n",
              "6692       3          6  2015-07-25   3878        412     1      0   \n",
              "6693       4          6  2015-07-25   9322       1219     1      0   \n",
              "6694       5          6  2015-07-25   2030        228     1      0   \n",
              "...      ...        ...         ...    ...        ...   ...    ...   \n",
              "13375   1111          1  2015-07-20   4321        374     1      0   \n",
              "13376   1112          1  2015-07-20   7728        674     1      0   \n",
              "13377   1113          1  2015-07-20   6351        635     1      0   \n",
              "13378   1114          1  2015-07-20  23731       3566     1      0   \n",
              "13379   1115          1  2015-07-20   6083        440     1      0   \n",
              "\n",
              "      StateHoliday  SchoolHoliday  \n",
              "6690             0              0  \n",
              "6691             0              0  \n",
              "6692             0              0  \n",
              "6693             0              0  \n",
              "6694             0              0  \n",
              "...            ...            ...  \n",
              "13375            0              1  \n",
              "13376            0              1  \n",
              "13377            0              1  \n",
              "13378            0              1  \n",
              "13379            0              0  \n",
              "\n",
              "[6690 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8f12f9bd-318c-45cf-9ef2-15d32869cd36\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6690</th>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>2015-07-25</td>\n",
              "      <td>4364</td>\n",
              "      <td>500</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6691</th>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>2015-07-25</td>\n",
              "      <td>2512</td>\n",
              "      <td>316</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6692</th>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>2015-07-25</td>\n",
              "      <td>3878</td>\n",
              "      <td>412</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6693</th>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>2015-07-25</td>\n",
              "      <td>9322</td>\n",
              "      <td>1219</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6694</th>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>2015-07-25</td>\n",
              "      <td>2030</td>\n",
              "      <td>228</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13375</th>\n",
              "      <td>1111</td>\n",
              "      <td>1</td>\n",
              "      <td>2015-07-20</td>\n",
              "      <td>4321</td>\n",
              "      <td>374</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13376</th>\n",
              "      <td>1112</td>\n",
              "      <td>1</td>\n",
              "      <td>2015-07-20</td>\n",
              "      <td>7728</td>\n",
              "      <td>674</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13377</th>\n",
              "      <td>1113</td>\n",
              "      <td>1</td>\n",
              "      <td>2015-07-20</td>\n",
              "      <td>6351</td>\n",
              "      <td>635</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13378</th>\n",
              "      <td>1114</td>\n",
              "      <td>1</td>\n",
              "      <td>2015-07-20</td>\n",
              "      <td>23731</td>\n",
              "      <td>3566</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13379</th>\n",
              "      <td>1115</td>\n",
              "      <td>1</td>\n",
              "      <td>2015-07-20</td>\n",
              "      <td>6083</td>\n",
              "      <td>440</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6690 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8f12f9bd-318c-45cf-9ef2-15d32869cd36')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8f12f9bd-318c-45cf-9ef2-15d32869cd36 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8f12f9bd-318c-45cf-9ef2-15d32869cd36');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-04b45bc1-8078-40e5-8f9c-0d14e89fd2ba\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-04b45bc1-8078-40e5-8f9c-0d14e89fd2ba')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-04b45bc1-8078-40e5-8f9c-0d14e89fd2ba button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_ea2d8807-84be-4679-9493-71568ab8c94d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('before_holiday_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ea2d8807-84be-4679-9493-71568ab8c94d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('before_holiday_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "before_holiday_data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bced2ed6-f0c4-40c9-b5d4-d4fdbef2b8a5",
      "metadata": {
        "id": "bced2ed6-f0c4-40c9-b5d4-d4fdbef2b8a5",
        "outputId": "8b782316-2885-4280-e707-e10baf0437ea",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Store  DayOfWeek        Date  Sales  Customers  Open  Promo  \\\n",
              "5575      1          7  2015-07-26      0          0     0      0   \n",
              "5576      2          7  2015-07-26      0          0     0      0   \n",
              "5577      3          7  2015-07-26      0          0     0      0   \n",
              "5578      4          7  2015-07-26      0          0     0      0   \n",
              "5579      5          7  2015-07-26      0          0     0      0   \n",
              "...     ...        ...         ...    ...        ...   ...    ...   \n",
              "6685   1111          7  2015-07-26      0          0     0      0   \n",
              "6686   1112          7  2015-07-26      0          0     0      0   \n",
              "6687   1113          7  2015-07-26      0          0     0      0   \n",
              "6688   1114          7  2015-07-26      0          0     0      0   \n",
              "6689   1115          7  2015-07-26      0          0     0      0   \n",
              "\n",
              "     StateHoliday  SchoolHoliday  \n",
              "5575            0              0  \n",
              "5576            0              0  \n",
              "5577            0              0  \n",
              "5578            0              0  \n",
              "5579            0              0  \n",
              "...           ...            ...  \n",
              "6685            0              0  \n",
              "6686            0              0  \n",
              "6687            0              0  \n",
              "6688            0              0  \n",
              "6689            0              0  \n",
              "\n",
              "[1115 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3452daf1-1207-4c58-bd41-6cc12489f3cf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5575</th>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>2015-07-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5576</th>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>2015-07-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5577</th>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>2015-07-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5578</th>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>2015-07-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5579</th>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>2015-07-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6685</th>\n",
              "      <td>1111</td>\n",
              "      <td>7</td>\n",
              "      <td>2015-07-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6686</th>\n",
              "      <td>1112</td>\n",
              "      <td>7</td>\n",
              "      <td>2015-07-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6687</th>\n",
              "      <td>1113</td>\n",
              "      <td>7</td>\n",
              "      <td>2015-07-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6688</th>\n",
              "      <td>1114</td>\n",
              "      <td>7</td>\n",
              "      <td>2015-07-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6689</th>\n",
              "      <td>1115</td>\n",
              "      <td>7</td>\n",
              "      <td>2015-07-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1115 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3452daf1-1207-4c58-bd41-6cc12489f3cf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3452daf1-1207-4c58-bd41-6cc12489f3cf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3452daf1-1207-4c58-bd41-6cc12489f3cf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8ac70c1e-1929-470b-9b62-f8d3f225302a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8ac70c1e-1929-470b-9b62-f8d3f225302a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8ac70c1e-1929-470b-9b62-f8d3f225302a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_20466577-1014-41b6-ae6a-18f81aa46e3f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('during_holiday_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_20466577-1014-41b6-ae6a-18f81aa46e3f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('during_holiday_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "during_holiday_data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "834439bf-c6b9-4dd7-9213-02a663e2b09c",
      "metadata": {
        "id": "834439bf-c6b9-4dd7-9213-02a663e2b09c",
        "outputId": "83f0b490-c5e9-44f8-caeb-c114680833f0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Store  DayOfWeek        Date  Sales  Customers  Open  Promo  \\\n",
              "0         1          5  2015-07-31   5263        555     1      1   \n",
              "1         2          5  2015-07-31   6064        625     1      1   \n",
              "2         3          5  2015-07-31   8314        821     1      1   \n",
              "3         4          5  2015-07-31  13995       1498     1      1   \n",
              "4         5          5  2015-07-31   4822        559     1      1   \n",
              "...     ...        ...         ...    ...        ...   ...    ...   \n",
              "5570   1111          1  2015-07-27   7742        515     1      1   \n",
              "5571   1112          1  2015-07-27  14383        946     1      1   \n",
              "5572   1113          1  2015-07-27   7582        684     1      1   \n",
              "5573   1114          1  2015-07-27  26720       3468     1      1   \n",
              "5574   1115          1  2015-07-27  10712        608     1      1   \n",
              "\n",
              "     StateHoliday  SchoolHoliday  \n",
              "0               0              1  \n",
              "1               0              1  \n",
              "2               0              1  \n",
              "3               0              1  \n",
              "4               0              1  \n",
              "...           ...            ...  \n",
              "5570            0              1  \n",
              "5571            0              1  \n",
              "5572            0              1  \n",
              "5573            0              1  \n",
              "5574            0              1  \n",
              "\n",
              "[5575 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-20a4621e-d33d-40c9-baec-d23f3eb81739\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5263</td>\n",
              "      <td>555</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6064</td>\n",
              "      <td>625</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8314</td>\n",
              "      <td>821</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>13995</td>\n",
              "      <td>1498</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>4822</td>\n",
              "      <td>559</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5570</th>\n",
              "      <td>1111</td>\n",
              "      <td>1</td>\n",
              "      <td>2015-07-27</td>\n",
              "      <td>7742</td>\n",
              "      <td>515</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5571</th>\n",
              "      <td>1112</td>\n",
              "      <td>1</td>\n",
              "      <td>2015-07-27</td>\n",
              "      <td>14383</td>\n",
              "      <td>946</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5572</th>\n",
              "      <td>1113</td>\n",
              "      <td>1</td>\n",
              "      <td>2015-07-27</td>\n",
              "      <td>7582</td>\n",
              "      <td>684</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5573</th>\n",
              "      <td>1114</td>\n",
              "      <td>1</td>\n",
              "      <td>2015-07-27</td>\n",
              "      <td>26720</td>\n",
              "      <td>3468</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5574</th>\n",
              "      <td>1115</td>\n",
              "      <td>1</td>\n",
              "      <td>2015-07-27</td>\n",
              "      <td>10712</td>\n",
              "      <td>608</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5575 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-20a4621e-d33d-40c9-baec-d23f3eb81739')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-20a4621e-d33d-40c9-baec-d23f3eb81739 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-20a4621e-d33d-40c9-baec-d23f3eb81739');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-feaa719c-719d-4e45-83a0-2572c7828e3e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-feaa719c-719d-4e45-83a0-2572c7828e3e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-feaa719c-719d-4e45-83a0-2572c7828e3e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f416a04e-8461-4959-aefa-691e4cf3ac2a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('after_holiday_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f416a04e-8461-4959-aefa-691e4cf3ac2a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('after_holiday_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ],
      "source": [
        "after_holiday_data"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "88c23dcd-f13d-4ffd-a161-cc48deaf09cd",
      "metadata": {
        "id": "88c23dcd-f13d-4ffd-a161-cc48deaf09cd"
      },
      "source": [
        "#### Compare sales behavior"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9e15acd7-8f32-4903-8706-1d5ee5433cb6",
      "metadata": {
        "id": "9e15acd7-8f32-4903-8706-1d5ee5433cb6",
        "outputId": "7ef93a68-e3fa-43f8-e776-27c675753d63",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Average Sales')"
            ]
          },
          "metadata": {},
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "avg_sales_before = before_holiday_data[\"Sales\"].mean()\n",
        "avg_sales_during = during_holiday_data[\"Sales\"].mean()\n",
        "avg_sales_after = after_holiday_data[\"Sales\"].mean()\n",
        "\n",
        "xlabels = [\"Before Holiday\", \"During Holiday\", \"After Holiday\"]\n",
        "average_sales = [avg_sales_before, avg_sales_during, avg_sales_after]\n",
        "\n",
        "plt.bar(xlabels, average_sales, color=[\"orange\",\"#0088cc\", \"green\"])\n",
        "plt.title(\"Average Sales Before, During, and After Holiday\")\n",
        "plt.xlabel(\"Phase Duration\")\n",
        "plt.ylabel(\"Average Sales\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ec94560b-74b3-481d-906c-b588b43d05b1",
      "metadata": {
        "id": "ec94560b-74b3-481d-906c-b588b43d05b1",
        "outputId": "e3cc2a08-989d-4ba5-88d9-8c3bdc358aae",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Average Sales')"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Scatter plot\n",
        "\n",
        "avg_sales_before = before_holiday_data[\"Sales\"].mean()\n",
        "avg_sales_during = during_holiday_data[\"Sales\"].mean()\n",
        "avg_sales_after = after_holiday_data[\"Sales\"].mean()\n",
        "\n",
        "xlabels = [\"Before Holiday\", \"During Holiday\", \"After Holiday\"]\n",
        "average_sales = [avg_sales_before, avg_sales_during, avg_sales_after]\n",
        "\n",
        "plt.scatter(xlabels,average_sales, color=[\"orange\",\"#0088cc\", \"green\"])\n",
        "plt.title(\"Average Sales Before, During, and After Holiday\")\n",
        "plt.xlabel(\"Phase Duration\")\n",
        "plt.ylabel(\"Average Sales\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d8c1a27a-9ab0-4343-a5c4-744e52394877",
      "metadata": {
        "id": "d8c1a27a-9ab0-4343-a5c4-744e52394877"
      },
      "source": [
        "### Find out any seasonal (Christmas, Easter etc) purchase behaviours,"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3b5bdf58-661a-4c42-901e-5b39ea71f3c5",
      "metadata": {
        "id": "3b5bdf58-661a-4c42-901e-5b39ea71f3c5"
      },
      "outputs": [],
      "source": [
        "christmas_holiday_start = '2013-12-25'\n",
        "christmas_holiday_end = '2013-12-27'\n",
        "\n",
        "easter_holiday_start = '2013-04-01'\n",
        "easter_holiday_end = '2013-04-02'\n",
        "\n",
        "public_holiday_start='2013-01-01'\n",
        "public_holiday_end='2013-01-02'\n",
        "\n",
        "christmas_holiday_data = train[(train['Date'] >= christmas_holiday_start) & (train['Date'] < christmas_holiday_end)]\n",
        "easter_holiday_data = train[(train['Date'] >= easter_holiday_start) & (train['Date'] < easter_holiday_end)]\n",
        "public_holiday_data=train[(train['Date'] >= public_holiday_start) & (train['Date'] < public_holiday_end)]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f8e81c77-8c92-413f-954b-16c68812e360",
      "metadata": {
        "id": "f8e81c77-8c92-413f-954b-16c68812e360",
        "outputId": "af56ee96-6c83-4ca3-8a1b-b3801c146e00",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Store  DayOfWeek        Date  Sales  Customers  Open  Promo  \\\n",
              "615810      1          4  2013-12-26      0          0     0      0   \n",
              "615811      2          4  2013-12-26      0          0     0      0   \n",
              "615812      3          4  2013-12-26      0          0     0      0   \n",
              "615813      4          4  2013-12-26      0          0     0      0   \n",
              "615814      5          4  2013-12-26      0          0     0      0   \n",
              "...       ...        ...         ...    ...        ...   ...    ...   \n",
              "618035   1111          3  2013-12-25      0          0     0      0   \n",
              "618036   1112          3  2013-12-25      0          0     0      0   \n",
              "618037   1113          3  2013-12-25      0          0     0      0   \n",
              "618038   1114          3  2013-12-25      0          0     0      0   \n",
              "618039   1115          3  2013-12-25      0          0     0      0   \n",
              "\n",
              "       StateHoliday  SchoolHoliday  \n",
              "615810            c              1  \n",
              "615811            c              1  \n",
              "615812            c              1  \n",
              "615813            c              1  \n",
              "615814            c              1  \n",
              "...             ...            ...  \n",
              "618035            c              1  \n",
              "618036            c              1  \n",
              "618037            c              1  \n",
              "618038            c              1  \n",
              "618039            c              1  \n",
              "\n",
              "[2230 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5fa8e10a-1aa0-4d00-a24d-20f732c34058\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>615810</th>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2013-12-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>c</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>615811</th>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>2013-12-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>c</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>615812</th>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>2013-12-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>c</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>615813</th>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>2013-12-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>c</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>615814</th>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>2013-12-26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>c</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>618035</th>\n",
              "      <td>1111</td>\n",
              "      <td>3</td>\n",
              "      <td>2013-12-25</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>c</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>618036</th>\n",
              "      <td>1112</td>\n",
              "      <td>3</td>\n",
              "      <td>2013-12-25</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>c</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>618037</th>\n",
              "      <td>1113</td>\n",
              "      <td>3</td>\n",
              "      <td>2013-12-25</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>c</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>618038</th>\n",
              "      <td>1114</td>\n",
              "      <td>3</td>\n",
              "      <td>2013-12-25</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>c</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>618039</th>\n",
              "      <td>1115</td>\n",
              "      <td>3</td>\n",
              "      <td>2013-12-25</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>c</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2230 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5fa8e10a-1aa0-4d00-a24d-20f732c34058')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5fa8e10a-1aa0-4d00-a24d-20f732c34058 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5fa8e10a-1aa0-4d00-a24d-20f732c34058');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e4756c63-1368-426c-a86b-c4a1e5a6c45a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e4756c63-1368-426c-a86b-c4a1e5a6c45a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e4756c63-1368-426c-a86b-c4a1e5a6c45a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_a6c305f8-210d-4ad8-a691-4baf0f83e1c0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('christmas_holiday_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a6c305f8-210d-4ad8-a691-4baf0f83e1c0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('christmas_holiday_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "christmas_holiday_data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d8bda5b5-e451-4ea7-84e8-8284344b5f5a",
      "metadata": {
        "id": "d8bda5b5-e451-4ea7-84e8-8284344b5f5a",
        "outputId": "cb61c5b2-2170-483f-c3a4-a191188b605f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Store  DayOfWeek        Date  Sales  Customers  Open  Promo  \\\n",
              "915745      1          1  2013-04-01      0          0     0      0   \n",
              "915746      2          1  2013-04-01      0          0     0      0   \n",
              "915747      3          1  2013-04-01      0          0     0      0   \n",
              "915748      4          1  2013-04-01      0          0     0      0   \n",
              "915749      5          1  2013-04-01      0          0     0      0   \n",
              "...       ...        ...         ...    ...        ...   ...    ...   \n",
              "916855   1111          1  2013-04-01      0          0     0      0   \n",
              "916856   1112          1  2013-04-01      0          0     0      0   \n",
              "916857   1113          1  2013-04-01      0          0     0      0   \n",
              "916858   1114          1  2013-04-01      0          0     0      0   \n",
              "916859   1115          1  2013-04-01      0          0     0      0   \n",
              "\n",
              "       StateHoliday  SchoolHoliday  \n",
              "915745            b              1  \n",
              "915746            b              1  \n",
              "915747            b              1  \n",
              "915748            b              1  \n",
              "915749            b              1  \n",
              "...             ...            ...  \n",
              "916855            b              1  \n",
              "916856            b              1  \n",
              "916857            b              1  \n",
              "916858            b              0  \n",
              "916859            b              1  \n",
              "\n",
              "[1115 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b7e0d8a9-d7b0-462c-b578-8c4e19cebb6e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>915745</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2013-04-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>b</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>915746</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2013-04-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>b</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>915747</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2013-04-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>b</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>915748</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2013-04-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>b</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>915749</th>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>2013-04-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>b</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>916855</th>\n",
              "      <td>1111</td>\n",
              "      <td>1</td>\n",
              "      <td>2013-04-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>b</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>916856</th>\n",
              "      <td>1112</td>\n",
              "      <td>1</td>\n",
              "      <td>2013-04-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>b</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>916857</th>\n",
              "      <td>1113</td>\n",
              "      <td>1</td>\n",
              "      <td>2013-04-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>b</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>916858</th>\n",
              "      <td>1114</td>\n",
              "      <td>1</td>\n",
              "      <td>2013-04-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>b</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>916859</th>\n",
              "      <td>1115</td>\n",
              "      <td>1</td>\n",
              "      <td>2013-04-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>b</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1115 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b7e0d8a9-d7b0-462c-b578-8c4e19cebb6e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b7e0d8a9-d7b0-462c-b578-8c4e19cebb6e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b7e0d8a9-d7b0-462c-b578-8c4e19cebb6e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bca76e86-b091-4ca6-a2aa-75e83e1fbf39\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bca76e86-b091-4ca6-a2aa-75e83e1fbf39')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bca76e86-b091-4ca6-a2aa-75e83e1fbf39 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_5fd0a286-6c67-4eb4-9e3e-260c72feb253\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('easter_holiday_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_5fd0a286-6c67-4eb4-9e3e-260c72feb253 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('easter_holiday_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "easter_holiday_data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6ca3fd93-595d-49cc-981f-fdf17b503ac9",
      "metadata": {
        "id": "6ca3fd93-595d-49cc-981f-fdf17b503ac9",
        "outputId": "2a253425-b008-46e1-8145-b5a40c7f203a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Store  DayOfWeek        Date  Sales  Customers  Open  Promo  \\\n",
              "1016095      1          2  2013-01-01      0          0     0      0   \n",
              "1016096      2          2  2013-01-01      0          0     0      0   \n",
              "1016097      3          2  2013-01-01      0          0     0      0   \n",
              "1016098      4          2  2013-01-01      0          0     0      0   \n",
              "1016099      5          2  2013-01-01      0          0     0      0   \n",
              "...        ...        ...         ...    ...        ...   ...    ...   \n",
              "1017204   1111          2  2013-01-01      0          0     0      0   \n",
              "1017205   1112          2  2013-01-01      0          0     0      0   \n",
              "1017206   1113          2  2013-01-01      0          0     0      0   \n",
              "1017207   1114          2  2013-01-01      0          0     0      0   \n",
              "1017208   1115          2  2013-01-01      0          0     0      0   \n",
              "\n",
              "        StateHoliday  SchoolHoliday  \n",
              "1016095            a              1  \n",
              "1016096            a              1  \n",
              "1016097            a              1  \n",
              "1016098            a              1  \n",
              "1016099            a              1  \n",
              "...              ...            ...  \n",
              "1017204            a              1  \n",
              "1017205            a              1  \n",
              "1017206            a              1  \n",
              "1017207            a              1  \n",
              "1017208            a              1  \n",
              "\n",
              "[1114 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0bc24500-7b34-4fd9-b4e1-6c833a39758e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1016095</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>a</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1016096</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>a</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1016097</th>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>a</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1016098</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>a</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1016099</th>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>a</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1017204</th>\n",
              "      <td>1111</td>\n",
              "      <td>2</td>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>a</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1017205</th>\n",
              "      <td>1112</td>\n",
              "      <td>2</td>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>a</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1017206</th>\n",
              "      <td>1113</td>\n",
              "      <td>2</td>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>a</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1017207</th>\n",
              "      <td>1114</td>\n",
              "      <td>2</td>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>a</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1017208</th>\n",
              "      <td>1115</td>\n",
              "      <td>2</td>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>a</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1114 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0bc24500-7b34-4fd9-b4e1-6c833a39758e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0bc24500-7b34-4fd9-b4e1-6c833a39758e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0bc24500-7b34-4fd9-b4e1-6c833a39758e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f4445742-eea6-4e9c-b849-4845026d8f23\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f4445742-eea6-4e9c-b849-4845026d8f23')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f4445742-eea6-4e9c-b849-4845026d8f23 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_79b03d81-1838-4074-ab17-f139ea69497f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('public_holiday_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_79b03d81-1838-4074-ab17-f139ea69497f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('public_holiday_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "public_holiday_data"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "20fb716b-b968-4f47-a961-0c089d961eb1",
      "metadata": {
        "id": "20fb716b-b968-4f47-a961-0c089d961eb1"
      },
      "source": [
        "#### Compare Behaviour"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "89c04d7f-a65f-46a4-9023-49aa66c92636",
      "metadata": {
        "id": "89c04d7f-a65f-46a4-9023-49aa66c92636",
        "outputId": "28be85c5-2104-4208-ceed-62c4d64570cc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Average Sales')"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAj0AAAHHCAYAAABUcOnjAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABcO0lEQVR4nO3dd1QU5/s28GsBWXqzAYrYaRI12FGwoCgRG3ajYo+ixhr1q7EbS2KPPQYbdtSosWFvxIJixS5iQewCFurz/uHL/FwXdFcWQef6nLPnsFPvGWZmr52ZZ1YhhBAgIiIi+sbp5XYBRERERF8CQw8RERHJAkMPERERyQJDDxEREckCQw8RERHJAkMPERERyQJDDxEREckCQw8RERHJAkMPERERyQJDD+WagwcPQqFQ4ODBg7ldSo6Ljo6GQqHAsmXLcruUTypevDgaN26crWksW7YMCoUC0dHRuimKCLm7HykUCvTt2/eTw2W27deuXRu1a9fOueJ0ILN1O3bsWCgUCo3GVygUGDt2bM4Up0MMPR+YP38+FAoFqlatmtul5DnJycmYPXs2KlasCAsLC1hZWcHNzQ09e/bElStXcrs8jWQckDJeRkZGsLe3h6+vL+bMmYOEhITcLjHHxMXFYciQIXB2doaJiQlMTU3h4eGBiRMn4sWLF7ldHl6/fo2xY8d+UyG4du3aKtvb+y9nZ+ccmeeOHTu+ig+fnJTxhSrjlS9fPpQsWRKdOnXCrVu3cru8bKlduzbKlSuXab+M4PLHH3984aq+Hga5XUBeExISguLFi+PkyZO4ceMGSpcundsl5RkBAQHYuXMn2rVrhx49eiAlJQVXrlzB9u3bUaNGjRw7iOeE8ePHo0SJEkhJScHDhw9x8OBBDBgwADNmzMDWrVvx3Xff6XR+jo6OePPmDfLly6fT6Wrq1KlT8PPzQ2JiIn788Ud4eHgAAE6fPo0pU6bg8OHD2LNnj87m17FjR7Rt2xZKpVLjcV6/fo1x48YBQJ7/VqyNokWLYvLkyWrdLS0tc2R+O3bswLx582QffACgf//+qFy5MlJSUnDmzBksXrwY//77Ly5cuAB7e/svVocu960vadSoURg+fHhul6FTDD3vuX37No4fP45NmzahV69eCAkJwZgxY75oDenp6UhOToaRkdEXne+nnDp1Ctu3b8ekSZPwv//9T6Xfn3/+mSfOFGijUaNGqFSpkvR+xIgR2L9/Pxo3bowmTZogKioKxsbG2Z5Pamoq0tPTYWhomGv/0xcvXqB58+bQ19fH2bNn1cLppEmTsGTJEp3M69WrVzA1NYW+vj709fV1Ms2vnaWlJX788cfcLiNbhBB4+/atTvaJL6lWrVpo2bIlAKBLly4oW7Ys+vfvj+XLl2PEiBFfrA5DQ8MvNi9dMjAwgIHBtxUTeHnrPSEhIbC2tsYPP/yAli1bIiQkROqXkpICGxsbdOnSRW28+Ph4GBkZYciQIVK3pKQkjBkzBqVLl4ZSqYSDgwN++eUXJCUlqYybcZ04JCQEbm5uUCqV2LVrFwDgjz/+QI0aNZA/f34YGxvDw8MDGzduVJv/mzdv0L9/fxQoUADm5uZo0qQJ7t+/n+k11vv376Nr164oXLgwlEol3Nzc8Pfff39y3dy8eRMA4OnpqdZPX18f+fPnl97fuXMHffr0gZOTE4yNjZE/f360atVK4/s7Tpw4gYYNG8LS0hImJibw9vbGsWPHVIZJSEjAgAEDULx4cSiVShQqVAj169fHmTNnNJpHZurWrYtff/0Vd+7cwapVq6TuWV2PDwwMRPHixaX3759anjVrFkqVKgWlUonLly9ner08MDAQZmZmuH//Ppo1awYzMzMULFgQQ4YMQVpamsq8nj59io4dO0qXFTt37oxz585pdH/DokWLcP/+fcyYMSPTs3GFCxfGqFGj1LofPXoUVapUgZGREUqWLIkVK1ao9M+4VHjo0CH06dMHhQoVQtGiRVX6vf8/P336NHx9fVGgQAEYGxujRIkS6Nq1q7TuChYsCAAYN26cdFkiY/vNWFcxMTFo3LgxzMzMUKRIEcybNw8AcOHCBdStWxempqZwdHTE6tWrVWp99uwZhgwZAnd3d5iZmcHCwgKNGjXCuXPn1JZ77ty5cHNzg4mJCaytrVGpUiW16emapvtMSkoKxo0bhzJlysDIyAj58+dHzZo1ERYWBuDdespYJ+9f3smQnp6OWbNmwc3NDUZGRihcuDB69eqF58+fq8wn476u3bt3o1KlSjA2NsaiRYuyrP/IkSNo1aoVihUrJh3vBg4ciDdv3qgMp802/+LFCwQGBsLS0lLa5rP75apu3boA3n3Bzajn/X04w8fuZQkJCYGTkxOMjIzg4eGBw4cPf3K+mR1D3r59i7Fjx6Js2bIwMjKCnZ0dWrRoIR1rdenWrVto1aoVbGxsYGJigmrVquHff//95HiZrYekpCQMHDgQBQsWlD5v7t27pzauJtv0rVu3oFAoMHPmTLXxjx8/DoVCgTVr1gDQ3TH/24pw2RQSEoIWLVrA0NAQ7dq1w4IFC3Dq1ClUrlwZ+fLlQ/PmzbFp0yYsWrRIJblv2bIFSUlJaNu2LYB3B5YmTZrg6NGj6NmzJ1xcXHDhwgXMnDkT165dw5YtW1Tmu3//fqxfvx59+/ZFgQIFpJ1w9uzZaNKkCTp06IDk5GSsXbsWrVq1wvbt2/HDDz9I4wcGBmL9+vXo2LEjqlWrhkOHDqn0zxAXF4dq1apJQatgwYLYuXMnunXrhvj4eAwYMCDLdePo6CitI09Pz4+m/1OnTuH48eNo27YtihYtiujoaCxYsAC1a9fG5cuXYWJikuW4+/fvR6NGjeDh4YExY8ZAT08PwcHBqFu3Lo4cOYIqVaoAAH766Sds3LgRffv2haurK54+fYqjR48iKioK33//fZbT/5SOHTvif//7H/bs2YMePXp81jSCg4Px9u1b9OzZE0qlEjY2NkhPT8902LS0NPj6+qJq1ar4448/sHfvXkyfPh2lSpVC7969Abzbnvz9/XHy5En07t0bzs7O+Oeff9C5c2eN6tm6dSuMjY2lb7yauHHjBlq2bIlu3bqhc+fO+PvvvxEYGAgPDw+4ubmpDNunTx8ULFgQo0ePxqtXrzKd3qNHj9CgQQMULFgQw4cPh5WVFaKjo7Fp0yYAQMGCBbFgwQL07t0bzZs3R4sWLQBA5TJjWloaGjVqBC8vL0ybNg0hISHo27cvTE1NMXLkSHTo0AEtWrTAwoUL0alTJ1SvXh0lSpQA8O7gumXLFrRq1QolSpRAXFwcFi1aBG9vb1y+fFm61LFkyRL0798fLVu2xM8//4y3b9/i/PnzOHHiBNq3b6/x+ntfWloanjx5otbd2NgYpqamADTfZ8aOHYvJkyeje/fuqFKlCuLj43H69GmcOXMG9evXR69evfDgwQOEhYVh5cqVavPs1asXli1bhi5duqB///64ffs2/vzzT5w9exbHjh1Tufx69epVtGvXDr169UKPHj3g5OSU5TJu2LABr1+/Ru/evZE/f36cPHkSc+fOxb1797Bhwwa19fGpbV4IgaZNm+Lo0aP46aef4OLigs2bN2u8zWclI1C8/yVNG4cOHcK6devQv39/KJVKzJ8/Hw0bNsTJkyezvM8mM2lpaWjcuDH27duHtm3b4ueff0ZCQgLCwsJw8eJFlCpV6pPjZ7ZNfRhegXfH/Ro1auD169fo378/8ufPj+XLl6NJkybYuHEjmjdvrnHdANC9e3esWrUK7du3R40aNbB///5MP2802aZLliwJT09PhISEYODAgSrjh4SEwNzcHE2bNgWgw2O+ICGEEKdPnxYARFhYmBBCiPT0dFG0aFHx888/S8Ps3r1bABDbtm1TGdfPz0+ULFlSer9y5Uqhp6cnjhw5ojLcwoULBQBx7NgxqRsAoaenJy5duqRW0+vXr1XeJycni3Llyom6detK3SIiIgQAMWDAAJVhAwMDBQAxZswYqVu3bt2EnZ2dePLkicqwbdu2FZaWlmrze196errw9vYWAEThwoVFu3btxLx588SdO3c+WbcQQoSHhwsAYsWKFVK3AwcOCADiwIED0jzKlCkjfH19RXp6usr0SpQoIerXry91s7S0FEFBQVnWm5Xg4GABQJw6dSrLYSwtLUXFihWl997e3sLb21ttuM6dOwtHR0fp/e3btwUAYWFhIR49eqQybEa/4OBglfEBiPHjx6sMW7FiReHh4SG9Dw0NFQDErFmzpG5paWmibt26atPMjLW1tShfvvxHh3mfo6OjACAOHz4sdXv06JFQKpVi8ODBUreMdVmzZk2RmpqqMo2Mfrdv3xZCCLF58+ZPrvfHjx+rbbMZMtbVb7/9JnV7/vy5MDY2FgqFQqxdu1bqfuXKFbXpvH37VqSlpalM8/bt20KpVKqs/6ZNmwo3N7csa9RWxj6T2atXr17ScJruM+XLlxc//PDDR+cZFBQkMju0HzlyRAAQISEhKt137dql1j1jG9i1a5dGy5lZ/ZMnTxYKhULlGKHpNr9lyxYBQEybNk3qlpqaKmrVqqXRNp9xbPn777/F48ePxYMHD8S///4rihcvLhQKhbQdfrgPZxgzZozaOsz4v50+fVrqdufOHWFkZCSaN28udftw2xdC/Rjy999/CwBixowZavN+/9iXmY9tUxmv33//XRp+wIABAoDK51FCQoIoUaKEKF68uLRfZHaM+nA9REZGCgCiT58+KjW1b99ebZ/TdJtetGiRACCioqKkbsnJyaJAgQKic+fOUrfPPeZ/iJe3/r+QkBAULlwYderUAfDu1HCbNm2wdu1a6bRr3bp1UaBAAaxbt04a7/nz5wgLC0ObNm2kbhs2bICLiwucnZ3x5MkT6ZVxavXAgQMq8/b29oarq6taTe9fP3/+/DlevnyJWrVqqZzOy7gU1qdPH5Vx+/Xrp/JeCIHQ0FD4+/tDCKFSl6+vL16+fPnR04QKhQK7d+/GxIkTYW1tjTVr1iAoKAiOjo5o06aNymnn9+tOSUnB06dPUbp0aVhZWX10HpGRkbh+/Trat2+Pp0+fSvW9evUK9erVw+HDh6UzJlZWVjhx4gQePHiQ5fQ+l5mZWbZacQUEBEiXajTx008/qbyvVauWSguTXbt2IV++fCpnnvT09BAUFKTR9OPj42Fubq5xPQDg6uqKWrVqSe8LFiwIJyenTFu+9OjR45P371hZWQEAtm/fjpSUFK1qeV/37t1Vpunk5ARTU1O0bt1a6u7k5AQrKyuVWpVKJfT03h3u0tLS8PTpU5iZmcHJyUllm7SyssK9e/dw6tSpz67xQ8WLF0dYWJja6/0zq5ruM1ZWVrh06RKuX7+udR0bNmyApaUl6tevr7L/e3h4wMzMTO24VKJECfj6+mo07ffrf/XqFZ48eYIaNWpACIGzZ8+qDf+pbX7Hjh0wMDCQzvwA7y6jf3hc+5SuXbuiYMGCsLe3xw8//IBXr15h+fLlKvfzaaN69epSIwAAKFasGJo2bYrdu3erXZ77mNDQUBQoUCDT5dGkiXhW29T7l+Uz7NixA1WqVEHNmjWlbmZmZujZsyeio6Nx+fJljevesWMHgHc3iL8vs6sEmm7TrVu3hpGRkcrtJLt378aTJ09U7oXT1TGfl7fw7iC4du1a1KlTR7rWCwBVq1bF9OnTsW/fPjRo0AAGBgYICAjA6tWrkZSUBKVSiU2bNiElJUUl9Fy/fh1RUVFZfvA9evRI5X3GKfgPbd++HRMnTkRkZKTKvUDv7xR37tyBnp6e2jQ+bHX2+PFjvHjxAosXL8bixYs1qutDSqUSI0eOxMiRIxEbG4tDhw5h9uzZWL9+PfLlyyftcG/evMHkyZMRHByM+/fvQwghTePly5dZTj/jQP6xU9gvX76EtbU1pk2bhs6dO8PBwQEeHh7w8/NDp06dULJkyY8ugyYSExNRqFChzx4/q/9nZoyMjNS2E2tra5XT1Hfu3IGdnZ3aZUFNWxZaWFhoHeKKFSum1u3DujJosrze3t4ICAjAuHHjMHPmTNSuXRvNmjVD+/btNW7hldm6srS0RNGiRdU+KCwtLVVqTU9Px+zZszF//nzcvn1b5QPq/Usdw4YNw969e1GlShWULl0aDRo0QPv27TO9l01Tpqam8PHx+egwmu4z48ePR9OmTVG2bFmUK1cODRs2RMeOHTVqbXj9+nW8fPkyy21b0+NSZmJiYjB69Ghs3bpVbRv5cJ/XZps3MzNTGe5jl9gyM3r0aNSqVQv6+vooUKAAXFxcsnVjbpkyZdS6lS1bFq9fv8bjx49ha2ur0XRu3rwJJyenz64lq20qs/sm79y5k+kjWFxcXKT+ml6ay/i8+fDyW2b/F023aSsrK/j7+2P16tWYMGECgHcnIYoUKSKdKACgs2M+Qw/e3UcSGxuLtWvXYu3atWr9Q0JC0KBBAwBA27ZtsWjRIuzcuRPNmjXD+vXr4ezsjPLly0vDp6enw93dHTNmzMh0fg4ODirvM2sRceTIETRp0gReXl6YP38+7OzskC9fPgQHB3/WTZUZZ0h+/PHHLEOFNs207ezs0LZtWwQEBMDNzQ3r16/HsmXLYGBggH79+iE4OBgDBgxA9erVYWlpCYVCgbZt22Z5b8v7Nf7++++oUKFCpsNkHARbt26NWrVqYfPmzdizZw9+//13TJ06FZs2bUKjRo00Xo4P3bt3Dy9fvlQJFAqFQmWHzZDVNzttWrh8iRZOzs7OiIyMRHJyssatSLKqK7P1oMnyKhQKbNy4Ef/99x+2bduG3bt3o2vXrpg+fTr+++8/tQ83bWrSpNbffvsNv/76K7p27YoJEybAxsYGenp6GDBggMo26eLigqtXr2L79u3YtWsXQkNDMX/+fIwePVpqTp8TNN1nvLy8cPPmTfzzzz/Ys2cP/vrrL8ycORMLFy5UOQuWmfT0dBQqVEjlG/X7Pgwimm7HaWlpqF+/Pp49e4Zhw4bB2dkZpqamuH//PgIDA9X2+S/Zqs/d3f2jgTOrsyranLWhzGnzOdCpUyds2LABx48fh7u7O7Zu3Yo+ffpIZ2cB3R3zGXrwLtQUKlRIavXwvk2bNmHz5s1YuHAhjI2N4eXlBTs7O6xbtw41a9bE/v37MXLkSJVxSpUqhXPnzqFevXoaP83yQ6GhoTAyMsLu3btVvgkHBwerDOfo6Ij09HTcvn1b5VvIjRs3VIbLuNM+LS3tk986tZEvXz589913uH79Op48eQJbW1ts3LgRnTt3xvTp06Xh3r59+8mWFxnfHiwsLDSq0c7ODn369EGfPn3w6NEjfP/995g0aVK2Qk/GzZ/vn9a3trbO9LLOnTt3Pns+2nB0dMSBAwfw+vVrlbM9H/6Ps+Lv74/w8HCEhoaiXbt2OVWmRqpVq4Zq1aph0qRJWL16NTp06IC1a9eie/fun72vaGLjxo2oU6cOli5dqtL9xYsXKFCggEo3U1NTtGnTBm3atEFycjJatGiBSZMmYcSIETn22AFt9pmMVqRdunRBYmIivLy8MHbsWCn0ZLUeS5Uqhb1798LT01OnTc8vXLiAa9euYfny5ejUqZPUPaNF2edwdHTEvn37kJiYqBKIr169mq1aP2RtbZ3pOs5q387ssuK1a9dgYmKi1SXtUqVK4cSJE0hJScnxZ3c5Ojpmut4yHiib0UhF02mlp6dLZ6oyZDZ9bbbphg0bomDBgggJCUHVqlXx+vVrdOzYUW04XRzzZX9Pz5s3b7Bp0yY0btwYLVu2VHv17dsXCQkJ2Lp1K4B391K0bNkS27Ztw8qVK5GamqpyaQt4l0jv37+f6bNP3rx5k2ULl/fp6+tDoVCofOOIjo5Wa/mV8eE8f/58le5z585Vm15AQABCQ0Nx8eJFtfk9fvz4o/Vcv34dMTExat1fvHiB8PBwWFtbSzu9vr6+2hmBuXPnfvLbk4eHB0qVKoU//vgDiYmJWdaYlpamdsq8UKFCsLe3V3skgDb279+PCRMmoESJEujQoYPUvVSpUrhy5YrKOjp37pxaM/qc4uvri5SUFJXtKT09PdOQnpmffvoJdnZ2GDx4MK5du6bW/9GjR5g4caLO6s3M8+fP1baJjLN5Gf+zjECXE898ymyb3LBhA+7fv6/S7enTpyrvDQ0N4erqCiFEtu5F+pz6MttnPqzPzMwMpUuXVtnuM1qEfbgeW7dujbS0NOkSwvtSU1M/e71nnLl5v34hBGbPnv1Z0wMAPz8/pKamYsGCBVK3tLQ0teNadpUqVQovX77E+fPnpW6xsbHYvHlzpsOHh4er3I9y9+5d/PPPP2jQoIFWZ7ACAgLw5MkT/Pnnn2r9Mjubmh1+fn44efIkwsPDpW6vXr3C4sWLUbx48UzvJ81KRriYM2eOSvdZs2apDavN54CBgQHatWsnXTFwd3dXa7mpq2O+7M/0bN26FQkJCWjSpEmm/atVqyYl0Ixw06ZNG8ydOxdjxoyBu7u7dG00Q8eOHbF+/Xr89NNPOHDgADw9PZGWloYrV65g/fr10rMvPuaHH37AjBkz0LBhQ7Rv3x6PHj3CvHnzULp0aZUd1MPDAwEBAZg1axaePn0qNVnP+HB7/1vflClTcODAAVStWhU9evSAq6srnj17hjNnzmDv3r149uxZlvWcO3cO7du3R6NGjVCrVi3Y2Njg/v37WL58OR48eIBZs2ZJO33jxo2xcuVKWFpawtXVFeHh4di7d+8nm4nq6enhr7/+QqNGjeDm5oYuXbqgSJEiuH//Pg4cOAALCwts27YNCQkJKFq0KFq2bIny5cvDzMwMe/fuxalTp1S+VXzMzp07ceXKFaSmpiIuLg779+9HWFgYHB0dsXXrVpVv9F27dsWMGTPg6+uLbt264dGjR1i4cCHc3NwQHx+v0fyyo1mzZqhSpQoGDx6MGzduwNnZGVu3bpX+X586Q2JtbY3NmzfDz88PFSpUUHki85kzZ7BmzRpUr149R5dh+fLlmD9/Ppo3b45SpUohISEBS5YsgYWFBfz8/AC8u5zi6uqKdevWoWzZsrCxsUG5cuW0agqclcaNG2P8+PHo0qULatSogQsXLiAkJETtfoAGDRrA1tYWnp6eKFy4MKKiovDnn3/ihx9++OTN4LVr18ahQ4fUDvQvX77M9AZTANKNmpruM66urqhduzY8PDxgY2OD06dPS814M2T8b/v37w9fX1/o6+ujbdu28Pb2Rq9evTB58mRERkaiQYMGyJcvH65fv44NGzZg9uzZWj3WIIOzszNKlSqFIUOG4P79+7CwsEBoaGim939pyt/fH56enhg+fDiio6Ph6uqKTZs2ffSewM/Rtm1bDBs2DM2bN0f//v3x+vVrLFiwAGXLls200UW5cuXg6+ur0mQdgNaXPjt16oQVK1Zg0KBBOHnyJGrVqoVXr15h79696NOnj9RMWxeGDx+ONWvWoFGjRujfvz9sbGywfPly3L59G6GhoSqXkD6lQoUKaNeuHebPn4+XL1+iRo0a2LdvX6ZnnbX9HOjUqRPmzJmDAwcOYOrUqSr9dHHMl2S7/ddXzt/fXxgZGYlXr15lOUxgYKDIly+f1NQ7PT1dODg4CABi4sSJmY6TnJwspk6dKtzc3IRSqRTW1tbCw8NDjBs3Trx8+VIaDkCWzfCWLl0qypQpI5RKpXB2dhbBwcGZNqV89eqVCAoKEjY2NsLMzEw0a9ZMXL16VQAQU6ZMURk2Li5OBAUFCQcHB5EvXz5ha2sr6tWrJxYvXvzR9RQXFyemTJkivL29hZ2dnTAwMBDW1taibt26YuPGjSrDPn/+XHTp0kUUKFBAmJmZCV9fX3HlyhXh6Oio0gTxwybrGc6ePStatGgh8ufPL5RKpXB0dBStW7cW+/btE0IIkZSUJIYOHSrKly8vzM3NhampqShfvryYP3/+R5dBiP9rTprxMjQ0FLa2tqJ+/fpi9uzZIj4+PtPxVq1aJUqWLCkMDQ1FhQoVxO7du7Nssv5+c9EP+33YZN3U1FRt2Mz+x48fPxbt27cX5ubmwtLSUgQGBopjx44JACrNtT/mwYMHYuDAgaJs2bLCyMhImJiYCA8PDzFp0iSVbdLR0THTZtEfNrv9WPP/D5vtnjlzRrRr104UK1ZMKJVKUahQIdG4cWOV5r9CCHH8+HHh4eEhDA0NVZrAZrWuvL29M21i/uEyvH37VgwePFjY2dkJY2Nj4enpKcLDw9WWadGiRcLLy0va9kqVKiWGDh2qsn6y4uHhIWxtbdXqe397+/CVQdN9ZuLEiaJKlSrCyspKGBsbC2dnZzFp0iSRnJwsDZOamir69esnChYsKBQKhdq2tHjxYuHh4SGMjY2Fubm5cHd3F7/88ot48OBBluvvUy5fvix8fHyEmZmZKFCggOjRo4c4d+5ctrb5p0+fio4dOwoLCwthaWkpOnbsKM6ePatVk/UNGzZ8svY9e/aIcuXKCUNDQ+Hk5CRWrVqVZZP1oKAgsWrVKum4XLFiRbXjlyZN1oV416R75MiRokSJEtKxuGXLluLmzZsfrTerbV6IrI9BN2/eFC1bthRWVlbCyMhIVKlSRWzfvj3TcT/WZF0IId68eSP69+8v8ufPL0xNTYW/v7+4e/euWpN1Tbfp97m5uQk9PT1x7949le7ZOeZ/SCGEjs+lUZ4QGRmJihUrYtWqVSqXaujbsWXLFjRv3hxHjx7NVusiyr6EhATY2Nhg1qxZGj9KgIhUVaxYETY2Nti3b1+OzUP29/R8Cz581Dvw7hqrnp4evLy8cqEi0rUP/8cZ9zdYWFhk6wnUpBuHDx9GkSJFPvsp3kRyd/r0aURGRqrcDJ8TeKbnGzBu3DhERESgTp06MDAwwM6dO7Fz50707Nnzo7+XQ1+P7t27482bN6hevTqSkpKwadMmHD9+HL/99tsX/eFEIiJdunjxIiIiIjB9+nQ8efIEt27dytEfZ5b9jczfgho1aiAsLAwTJkxAYmIiihUrhrFjx6o1paevV926dTF9+nRs374db9++RenSpTF37lyVG1iJiL42GzduxPjx4+Hk5IQ1a9bkaOABeKaHiIiIZIL39BAREZEsMPQQERGRLPCeHrx7uu2DBw9gbm6eo4/CJyIiIt0RQiAhIQH29vYaPWiRoQfAgwcP1H4ElIiIiL4Od+/eRdGiRT85HEMPID1e/u7du7CwsMjlaoiIiEgT8fHxcHBw+OTPxGRg6MH//XaRhYUFQw8REdFXRtNbU3gjMxEREckCQw8RERHJAkMPERERyQJDDxEREckCQw8RERHJAkMPERERyQJDDxEREckCQw8RERHJAkMPERERyQJDDxEREckCQw8RERHJAkMPERERyQJDDxEREckCQw8RERHJAkMPERERyYJBbhdARDlLMTUit0ugXCaGeeR2CUR5As/0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLORq6Jk8eTIqV64Mc3NzFCpUCM2aNcPVq1dVhnn79i2CgoKQP39+mJmZISAgAHFxcSrDxMTE4IcffoCJiQkKFSqEoUOHIjU19UsuChEREeVxuRp6Dh06hKCgIPz3338ICwtDSkoKGjRogFevXknDDBw4ENu2bcOGDRtw6NAhPHjwAC1atJD6p6Wl4YcffkBycjKOHz+O5cuXY9myZRg9enRuLBIRERHlUQohhMjtIjI8fvwYhQoVwqFDh+Dl5YWXL1+iYMGCWL16NVq2bAkAuHLlClxcXBAeHo5q1aph586daNy4MR48eIDChQsDABYuXIhhw4bh8ePHMDQ0/OR84+PjYWlpiZcvX8LCwiJHl5HoS1NMjcjtEiiXiWEeuV0CUY7Q9vM7T93T8/LlSwCAjY0NACAiIgIpKSnw8fGRhnF2dkaxYsUQHh4OAAgPD4e7u7sUeADA19cX8fHxuHTpUqbzSUpKQnx8vMqLiIiIvm15JvSkp6djwIAB8PT0RLly5QAADx8+hKGhIaysrFSGLVy4MB4+fCgN837gyeif0S8zkydPhqWlpfRycHDQ8dIQERFRXpNnQk9QUBAuXryItWvX5vi8RowYgZcvX0qvu3fv5vg8iYiIKHcZ5HYBANC3b19s374dhw8fRtGiRaXutra2SE5OxosXL1TO9sTFxcHW1lYa5uTJkyrTy2jdlTHMh5RKJZRKpY6XgoiIiPKyXD3TI4RA3759sXnzZuzfvx8lSpRQ6e/h4YF8+fJh3759UrerV68iJiYG1atXBwBUr14dFy5cwKNHj6RhwsLCYGFhAVdX1y+zIERERJTn5eqZnqCgIKxevRr//PMPzM3NpXtwLC0tYWxsDEtLS3Tr1g2DBg2CjY0NLCws0K9fP1SvXh3VqlUDADRo0ACurq7o2LEjpk2bhocPH2LUqFEICgri2RwiIiKS5GroWbBgAQCgdu3aKt2Dg4MRGBgIAJg5cyb09PQQEBCApKQk+Pr6Yv78+dKw+vr62L59O3r37o3q1avD1NQUnTt3xvjx47/UYhAREdFXIE89pye38Dk99C3jc3qIz+mhb9VX/ZweIiIiopzC0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESywNBDREREssDQQ0RERLLA0ENERESy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9epVxMTEoHr16rlYJREREeVFefry1pAhQ+Dv7w9HR0c8ePAAY8aMgb6+Ptq1awdLS0t069YNgwYNgo2NDSwsLNCvXz9Ur16dLbeIiIhITZ4OPffu3UO7du3w9OlTFCxYEDVr1sR///2HggULAgBmzpwJPT09BAQEICkpCb6+vpg/f34uV01ERER5UZ4OPWvXrv1ofyMjI8ybNw/z5s37QhURERHR1+qruqeHiIiI6HMx9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSww9BAREZEsMPQQERGRLDD0EBERkSx8M6Fn3rx5KF68OIyMjFC1alWcPHkyt0siIiKiPOSbCD3r1q3DoEGDMGbMGJw5cwbly5eHr68vHj16lNulERERUR7xTYSeGTNmoEePHujSpQtcXV2xcOFCmJiY4O+//87t0oiIiCiP+OpDT3JyMiIiIuDj4yN109PTg4+PD8LDw3OxMiIiIspLDHK7gOx68uQJ0tLSULhwYZXuhQsXxpUrVzIdJykpCUlJSdL7ly9fAgDi4+N1X+Br3U+SvjI5sV1p421i7s6fcl2OHNu08TZ3Z0+5L6e2wYzpCiE0Gv6rDz2fY/LkyRg3bpxadwcHh1yo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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "avg_sales_christmas_holiday = christmas_holiday_data['Sales'].mean()\n",
        "avg_sales_easter_holiday = easter_holiday_data['Sales'].mean()\n",
        "avg_sales_public_holiday = public_holiday_data['Sales'].mean()\n",
        "\n",
        "\n",
        "labels = ['Christmas_Holiday', 'Easter_Holiday','Public_Holiday']\n",
        "average_sales = [avg_sales_christmas_holiday, avg_sales_easter_holiday,avg_sales_public_holiday]\n",
        "\n",
        "plt.bar(labels, average_sales, color=['orange','#0088cc', 'green'])\n",
        "plt.title('Average Sales During Christmas ,Easter and Public Holidays')\n",
        "plt.xlabel('Types of Holidays')\n",
        "plt.ylabel('Average Sales')\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "aa92aafd-1aa0-4b2a-9053-14fb4086b73d",
      "metadata": {
        "id": "aa92aafd-1aa0-4b2a-9053-14fb4086b73d",
        "outputId": "5ccdca36-7aca-443a-a8c3-f22ad5449688",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Average Sales')"
            ]
          },
          "metadata": {},
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# scatter\n",
        "\n",
        "avg_sales_christmas_holiday = christmas_holiday_data['Sales'].mean()\n",
        "avg_sales_easter_holiday = easter_holiday_data['Sales'].mean()\n",
        "avg_sales_public_holiday = public_holiday_data['Sales'].mean()\n",
        "\n",
        "\n",
        "labels = ['Christmas_Holiday', 'Easter_Holiday','Public_Holiday']\n",
        "average_sales = [avg_sales_christmas_holiday, avg_sales_easter_holiday,avg_sales_public_holiday]\n",
        "\n",
        "plt.scatter(labels, average_sales, color=['orange','#0088cc', 'green'])\n",
        "plt.title('Average Sales During Christmas ,Easter and Public Holidays')\n",
        "plt.xlabel('Types of Holidays')\n",
        "plt.ylabel('Average Sales')\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "edb9e278-f292-478d-aa5d-ec64caf94642",
      "metadata": {
        "id": "edb9e278-f292-478d-aa5d-ec64caf94642"
      },
      "source": [
        "### What can you say about the correlation between sales and number of customers?\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3a897e7a-88d8-43e0-aca6-026ca93eae0f",
      "metadata": {
        "id": "3a897e7a-88d8-43e0-aca6-026ca93eae0f",
        "outputId": "099faf68-ac0c-4303-9111-d1aa5b0a05e7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation between Sales and Number of Customers: 0.8947107733017032\n"
          ]
        }
      ],
      "source": [
        "correlation_coefficient = train['Sales'].corr(train['Customers'])\n",
        "\n",
        "print(\"Correlation between Sales and Number of Customers:\", correlation_coefficient)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5831df57-2090-4927-82e0-e9917c84eacd",
      "metadata": {
        "id": "5831df57-2090-4927-82e0-e9917c84eacd"
      },
      "outputs": [],
      "source": [
        "# Positive correlation_coefficient means if the no of coustomers increases tends to increase in sales"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1f6029fd-339e-436f-a44c-65269ec72865",
      "metadata": {
        "id": "1f6029fd-339e-436f-a44c-65269ec72865",
        "outputId": "fba8bbb1-2aad-4fb2-a058-13cb9b0d98d7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# visualize\n",
        "\n",
        "plt.scatter(train['Customers'], train['Sales'])\n",
        "plt.title('Scatter Plot of Sales vs Customers')\n",
        "plt.xlabel('Number of Customers')\n",
        "plt.ylabel('Sales')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c3d7bbf2-7485-48a7-8f9f-f28206ba2dd0",
      "metadata": {
        "id": "c3d7bbf2-7485-48a7-8f9f-f28206ba2dd0"
      },
      "source": [
        "### How does promo affect sales? Are the promos attracting more customers? How does it affect already existing customers?\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9d636af5-287b-48aa-87e4-d6bfeb37dfb9",
      "metadata": {
        "id": "9d636af5-287b-48aa-87e4-d6bfeb37dfb9",
        "outputId": "c5879883-a35f-4551-f192-130d960ffc32",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 0]\n"
          ]
        }
      ],
      "source": [
        "print(train[\"Promo\"].unique())"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c2322193-0187-4454-83f0-928321cc41c0",
      "metadata": {
        "id": "c2322193-0187-4454-83f0-928321cc41c0"
      },
      "source": [
        "#### Effect of Promotion on Sales"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b951c80f-8301-4ee7-9ecb-1485c6c7ce22",
      "metadata": {
        "id": "b951c80f-8301-4ee7-9ecb-1485c6c7ce22",
        "outputId": "689feaa5-52e6-47b9-9a19-0fb4703bcedc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average Sales with Promotion: 7991.152045969903\n",
            "Average Sales without Promotion: 4406.050805160786\n"
          ]
        }
      ],
      "source": [
        "average_sales_promo = train[train['Promo'] == 1]['Sales'].mean()\n",
        "average_sales_no_promo = train[train['Promo'] == 0]['Sales'].mean()\n",
        "\n",
        "print(\"Average Sales with Promotion:\", average_sales_promo)\n",
        "print(\"Average Sales without Promotion:\", average_sales_no_promo)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "44d732b1-d90b-4c30-9f1f-1674a1d22787",
      "metadata": {
        "id": "44d732b1-d90b-4c30-9f1f-1674a1d22787",
        "outputId": "d3a82155-b1e4-437d-caef-cf682941f83d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 555  625  821 ... 3900   36 4065]\n"
          ]
        }
      ],
      "source": [
        "print(train[\"Customers\"].unique())"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6607f5b3-4b79-4738-96ad-c8d741826512",
      "metadata": {
        "id": "6607f5b3-4b79-4738-96ad-c8d741826512"
      },
      "source": [
        "#### Effect of Promotion on Coustomers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "10b2fd3d-d965-44d5-b86f-f9c5bb8fc7be",
      "metadata": {
        "id": "10b2fd3d-d965-44d5-b86f-f9c5bb8fc7be",
        "outputId": "2ca421c2-e6bf-4393-a05c-2df1ad4dccfc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average Customers with Promotion: 820.0988146773861\n",
            "Average Customers without Promotion: 517.8235417537579\n"
          ]
        }
      ],
      "source": [
        "average_customers_promo = train[train['Promo'] == 1]['Customers'].mean()\n",
        "average_customers_no_promo = train[train['Promo'] == 0]['Customers'].mean()\n",
        "\n",
        "print(\"Average Customers with Promotion:\", average_customers_promo)\n",
        "print(\"Average Customers without Promotion:\", average_customers_no_promo)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "76010813-c3d9-4258-a5ce-29c7e52f540c",
      "metadata": {
        "id": "76010813-c3d9-4258-a5ce-29c7e52f540c",
        "outputId": "e5d84583-0b14-48ce-dfdf-ead65e12f5d7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# visualize\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Average Sales Bar plot\n",
        "plt.bar(['Sales With Promotion', 'Sales Without Promotion'], [average_sales_promo, average_sales_no_promo], color=['orange', '#0088cc'])\n",
        "plt.title('Average Sales with and without Promotion')\n",
        "plt.ylabel('Average Sales')\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a06efbf0-49d3-4105-8198-98174c8106c4",
      "metadata": {
        "id": "a06efbf0-49d3-4105-8198-98174c8106c4",
        "outputId": "2178c7ca-c7d3-4b36-b1cb-025fe2d6eb53",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Average Customers Bar Plot\n",
        "plt.bar(['Customers With Promotion', 'Customers Without Promotion'], [average_customers_promo, average_customers_no_promo], color=['magenta', 'palegreen'])\n",
        "plt.title('Average Customers with and without Promotion')\n",
        "plt.ylabel('Average Number of Customers')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b70a17e0-420c-43ca-a8bc-532140f49894",
      "metadata": {
        "id": "b70a17e0-420c-43ca-a8bc-532140f49894",
        "outputId": "145d3c19-f156-4366-c11f-ff4e8e682129",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation between Sales and Promotion: 0.45234471982402763\n",
            "Correlation between Number of Customers and Promotion: 0.31616947667426304\n"
          ]
        }
      ],
      "source": [
        "# Correlation coefficient\n",
        "\n",
        "correlation_coefficient_sales = train['Sales'].corr(train['Promo'])\n",
        "correlation_coefficient_customers = train['Customers'].corr(train['Promo'])\n",
        "\n",
        "print(\"Correlation between Sales and Promotion:\", correlation_coefficient_sales)\n",
        "print(\"Correlation between Number of Customers and Promotion:\", correlation_coefficient_customers)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d8e85543-bd4b-472a-8156-65b46ffe7f82",
      "metadata": {
        "id": "d8e85543-bd4b-472a-8156-65b46ffe7f82",
        "outputId": "2bce8039-3767-4635-9b3c-2adf518f1ce2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'No of customer with promotion')"
            ]
          },
          "metadata": {},
          "execution_count": 46
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "average_customers_promo = train[train['Promo'] == 1]['Customers']\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.plot(average_customers_promo)\n",
        "plt.title(\"Average\")\n",
        "plt.xlabel(\"Year\")\n",
        "plt.ylabel(\"No of customer with promotion\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "69b3b263-511a-4d8b-8194-c09fc5886ce4",
      "metadata": {
        "id": "69b3b263-511a-4d8b-8194-c09fc5886ce4"
      },
      "source": [
        "### Could the promos be deployed in more effective ways? Which stores should promos be deployed in?\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9c0b61b6-4b1d-4fc8-b8b3-b990ee4416b7",
      "metadata": {
        "id": "9c0b61b6-4b1d-4fc8-b8b3-b990ee4416b7",
        "outputId": "c7c05f6c-b993-43f6-a5b8-5fc11c7fae6b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Store StoreType Assortment  CompetitionDistance  \\\n",
              "0         1         c          a               1270.0   \n",
              "1         2         a          a                570.0   \n",
              "2         3         a          a              14130.0   \n",
              "3         4         c          c                620.0   \n",
              "4         5         a          a              29910.0   \n",
              "...     ...       ...        ...                  ...   \n",
              "1110   1111         a          a               1900.0   \n",
              "1111   1112         c          c               1880.0   \n",
              "1112   1113         a          c               9260.0   \n",
              "1113   1114         a          c                870.0   \n",
              "1114   1115         d          c               5350.0   \n",
              "\n",
              "      CompetitionOpenSinceMonth  CompetitionOpenSinceYear  Promo2  \\\n",
              "0                           9.0                    2008.0       0   \n",
              "1                          11.0                    2007.0       1   \n",
              "2                          12.0                    2006.0       1   \n",
              "3                           9.0                    2009.0       0   \n",
              "4                           4.0                    2015.0       0   \n",
              "...                         ...                       ...     ...   \n",
              "1110                        6.0                    2014.0       1   \n",
              "1111                        4.0                    2006.0       0   \n",
              "1112                        NaN                       NaN       0   \n",
              "1113                        NaN                       NaN       0   \n",
              "1114                        NaN                       NaN       1   \n",
              "\n",
              "      Promo2SinceWeek  Promo2SinceYear     PromoInterval  \n",
              "0                 NaN              NaN               NaN  \n",
              "1                13.0           2010.0   Jan,Apr,Jul,Oct  \n",
              "2                14.0           2011.0   Jan,Apr,Jul,Oct  \n",
              "3                 NaN              NaN               NaN  \n",
              "4                 NaN              NaN               NaN  \n",
              "...               ...              ...               ...  \n",
              "1110             31.0           2013.0   Jan,Apr,Jul,Oct  \n",
              "1111              NaN              NaN               NaN  \n",
              "1112              NaN              NaN               NaN  \n",
              "1113              NaN              NaN               NaN  \n",
              "1114             22.0           2012.0  Mar,Jun,Sept,Dec  \n",
              "\n",
              "[1115 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-755e60f5-4066-4d39-b8cf-8752852421c6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>StoreType</th>\n",
              "      <th>Assortment</th>\n",
              "      <th>CompetitionDistance</th>\n",
              "      <th>CompetitionOpenSinceMonth</th>\n",
              "      <th>CompetitionOpenSinceYear</th>\n",
              "      <th>Promo2</th>\n",
              "      <th>Promo2SinceWeek</th>\n",
              "      <th>Promo2SinceYear</th>\n",
              "      <th>PromoInterval</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>c</td>\n",
              "      <td>a</td>\n",
              "      <td>1270.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2008.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>570.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>2007.0</td>\n",
              "      <td>1</td>\n",
              "      <td>13.0</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>14130.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>2006.0</td>\n",
              "      <td>1</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>c</td>\n",
              "      <td>c</td>\n",
              "      <td>620.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>29910.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2015.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1110</th>\n",
              "      <td>1111</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>1900.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>1</td>\n",
              "      <td>31.0</td>\n",
              "      <td>2013.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1111</th>\n",
              "      <td>1112</td>\n",
              "      <td>c</td>\n",
              "      <td>c</td>\n",
              "      <td>1880.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2006.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1112</th>\n",
              "      <td>1113</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>9260.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1113</th>\n",
              "      <td>1114</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>870.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1114</th>\n",
              "      <td>1115</td>\n",
              "      <td>d</td>\n",
              "      <td>c</td>\n",
              "      <td>5350.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>22.0</td>\n",
              "      <td>2012.0</td>\n",
              "      <td>Mar,Jun,Sept,Dec</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1115 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-755e60f5-4066-4d39-b8cf-8752852421c6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-755e60f5-4066-4d39-b8cf-8752852421c6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-755e60f5-4066-4d39-b8cf-8752852421c6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e474ea59-e527-47a2-ad0e-3b3bdbb915f7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e474ea59-e527-47a2-ad0e-3b3bdbb915f7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e474ea59-e527-47a2-ad0e-3b3bdbb915f7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ],
      "source": [
        "store=pd.read_csv(\"store.csv\")\n",
        "store.head(1115)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d9df018d-b6f0-4349-9fcb-4dfc5274bbe9",
      "metadata": {
        "id": "d9df018d-b6f0-4349-9fcb-4dfc5274bbe9"
      },
      "outputs": [],
      "source": [
        "df_1=train.copy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "450757a3-fd9b-4801-9ed6-be98b3f3fec4",
      "metadata": {
        "id": "450757a3-fd9b-4801-9ed6-be98b3f3fec4",
        "outputId": "26c4ba64-7ad8-4b20-fe9c-65bfd80ddf4b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              Sales    Customers  Promo  Conversion_Rate\n",
            "Store                                                   \n",
            "1       3945.704883   467.646497    942         8.437366\n",
            "2       4122.991507   486.045648    942         8.482725\n",
            "3       5741.253715   620.286624    942         9.255808\n",
            "4       8021.769639  1100.057325    942         7.292138\n",
            "5       3867.110403   444.360934    942         8.702634\n",
            "...             ...          ...    ...              ...\n",
            "1111    4342.968153   373.548832    942        11.626239\n",
            "1112    8465.280255   693.498938    942        12.206623\n",
            "1113    5516.180467   596.763270    942         9.243499\n",
            "1114   17200.196391  2664.057325    942         6.456391\n",
            "1115    5225.296178   358.687898    942        14.567807\n",
            "\n",
            "[1115 rows x 4 columns]\n"
          ]
        }
      ],
      "source": [
        "#Storewise info\n",
        "store_performance = df_1.groupby('Store').agg({'Sales': 'mean', 'Customers': 'mean', 'Promo': 'count'})\n",
        "\n",
        "# sales per customer\n",
        "store_performance['Conversion_Rate'] = store_performance['Sales'] / store_performance['Customers']\n",
        "print(store_performance)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1b6974c3-8b19-47d1-bed7-0bc614863ae5",
      "metadata": {
        "id": "1b6974c3-8b19-47d1-bed7-0bc614863ae5",
        "outputId": "a596eb1d-59f4-4d39-997d-09b9fa5e7124",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                    Sales    Customers\n",
            "Store Promo                           \n",
            "1     0       3198.994845   399.682131\n",
            "      1       5152.886111   577.522222\n",
            "2     0       2855.058419   366.876289\n",
            "      1       6172.816667   678.702778\n",
            "3     0       3967.596220   477.445017\n",
            "...                   ...          ...\n",
            "1113  1       7320.086111   754.250000\n",
            "1114  0      14477.742268  2353.958763\n",
            "      1      21601.497222  3165.383333\n",
            "1115  0       4082.221649   297.800687\n",
            "      1       7073.266667   457.122222\n",
            "\n",
            "[2230 rows x 2 columns]\n"
          ]
        }
      ],
      "source": [
        "PromotionEffectiveness = df_1.groupby(['Store', 'Promo']).agg({'Sales': 'mean',\n",
        "                                                            'Customers': 'mean'})\n",
        "\n",
        "print(PromotionEffectiveness)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0f56d43f-35fc-4a12-bba3-c4ca1c329de0",
      "metadata": {
        "id": "0f56d43f-35fc-4a12-bba3-c4ca1c329de0"
      },
      "source": [
        "#### Visualize the promotion effectiveness"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "07fa9dce-1ca4-45e4-8f04-c9a139aa7787",
      "metadata": {
        "id": "07fa9dce-1ca4-45e4-8f04-c9a139aa7787",
        "outputId": "a05a8ec3-4460-420d-96bd-1ef705d89ce1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 927
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import seaborn as sns\n",
        "\n",
        "# average sales by store\n",
        "sns.boxplot(x='Store', y='Sales', hue='Promo', data=df_1)\n",
        "plt.title('Average Sales by Store and Promotion')\n",
        "plt.show()\n",
        "\n",
        "# average number of customers by store\n",
        "sns.boxplot(x='Store', y='Customers', hue='Promo', data=df_1)\n",
        "plt.title('Average Customers by Store and Promotion')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0d7aa9ee-8ee6-47dd-ac9f-9f4ceca37cdd",
      "metadata": {
        "id": "0d7aa9ee-8ee6-47dd-ac9f-9f4ceca37cdd",
        "outputId": "1cd17d8e-4047-4c7e-be08-4049325d5644",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "P value :  511.54718673163774\n",
            " T Statistic :  0.0\n",
            "There is no statistically significant difference in sales between promoted and non-promoted stores.\n"
          ]
        }
      ],
      "source": [
        "# Statical Analyze\n",
        "\n",
        "from scipy.stats import ttest_ind\n",
        "promotion_sales = df_1[df_1['Promo'] == 1]['Sales']\n",
        "non_promotion_sales = df_1[df_1['Promo'] == 0]['Sales']\n",
        "\n",
        "p_value,t_statistic = ttest_ind(promotion_sales, non_promotion_sales)\n",
        "print(\"P value : \",p_value)\n",
        "print(\" T Statistic : \",t_statistic)\n",
        "\n",
        "if p_value < 0.05:\n",
        "    print(\"The difference in sales between promoted and non-promoted stores is statistically significant.\")\n",
        "else:\n",
        "    print(\"There is no statistically significant difference in sales between promoted and non-promoted stores.\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "39aee646-3bae-4983-b497-a629e4254a77",
      "metadata": {
        "id": "39aee646-3bae-4983-b497-a629e4254a77"
      },
      "source": [
        "### Trends of customer behavior during store open and closing times\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ec749eb4-4757-4bd1-a38f-0a4dd6b3ac3b",
      "metadata": {
        "id": "ec749eb4-4757-4bd1-a38f-0a4dd6b3ac3b"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "24dc3b83-36cc-4f10-b9b3-9f05f9350b38",
      "metadata": {
        "id": "24dc3b83-36cc-4f10-b9b3-9f05f9350b38"
      },
      "outputs": [],
      "source": [
        "df_2=train.copy()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "917fead0-423d-4edc-8534-86111e2bad32",
      "metadata": {
        "id": "917fead0-423d-4edc-8534-86111e2bad32"
      },
      "source": [
        "### Which stores are opened on all weekdays? How does that affect their sales on weekends?\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f384cfb9-68c1-47f4-818d-c9a2002b539d",
      "metadata": {
        "id": "f384cfb9-68c1-47f4-818d-c9a2002b539d"
      },
      "outputs": [],
      "source": [
        "pd.set_option(\"display.max_columns\",None)\n",
        "pd.set_option(\"display.max_rows\",None)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "119901cc-fbde-422e-bb73-ccde89cf592b",
      "metadata": {
        "id": "119901cc-fbde-422e-bb73-ccde89cf592b",
        "outputId": "f8613027-723a-40d4-fc8f-c6317e7a7b58",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        }
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-56-6199cbfc584a>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mstores_open_weekdays\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Store'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'DayOfWeek'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mstores_open_all_weekdays\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstores_open_weekdays\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstores_open_weekdays\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Stores open on all weekdays:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstores_open_all_weekdays\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/ops/common.py\u001b[0m in \u001b[0;36mnew_method\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m     70\u001b[0m         \u001b[0mother\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mitem_from_zerodim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnew_method\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/arraylike.py\u001b[0m in \u001b[0;36m__gt__\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m     56\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"__gt__\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__gt__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 58\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cmp_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moperator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     59\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"__ge__\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_cmp_method\u001b[0;34m(self, other, op)\u001b[0m\n\u001b[1;32m   6241\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6242\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrstate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6243\u001b[0;31m             \u001b[0mres_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcomparison_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6244\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6245\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_construct_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mres_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/ops/array_ops.py\u001b[0m in \u001b[0;36mcomparison_op\u001b[0;34m(left, right, op)\u001b[0m\n\u001b[1;32m    285\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    286\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mis_object_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 287\u001b[0;31m         \u001b[0mres_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcomp_method_OBJECT_ARRAY\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    288\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    289\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/ops/array_ops.py\u001b[0m in \u001b[0;36mcomp_method_OBJECT_ARRAY\u001b[0;34m(op, x, y)\u001b[0m\n\u001b[1;32m     73\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlibops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvec_compare\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 75\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlibops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscalar_compare\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     76\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/ops.pyx\u001b[0m in \u001b[0;36mpandas._libs.ops.scalar_compare\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"
          ]
        }
      ],
      "source": [
        "# Identify stores opened on all weekdays\n",
        "\n",
        "stores_open_weekdays = df_2.groupby('Store')['DayOfWeek'].unique()\n",
        "\n",
        "stores_open_all_weekdays = stores_open_weekdays[stores_open_weekdays > 6].index.all()\n",
        "\n",
        "print(\"Stores open on all weekdays:\", stores_open_all_weekdays)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9c435b93-ef15-4ba7-a172-6df8b3d76dd4",
      "metadata": {
        "id": "9c435b93-ef15-4ba7-a172-6df8b3d76dd4"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8ee95316-ba41-4cc6-bbb0-5a2731a5e3e6",
      "metadata": {
        "id": "8ee95316-ba41-4cc6-bbb0-5a2731a5e3e6"
      },
      "outputs": [],
      "source": [
        "# weekend sales\n",
        "\n",
        "weekday_open_stores_data = df_2[df_2['Store'].isin(stores_open_all_weekdays)]\n",
        "weekend_data = weekday_open_stores_data[weekday_open_stores_data['DayOfWeek'].isin([6, 7])]\n",
        "\n",
        "weekend_sales = weekend_data.groupby('Store')['Sales'].sum()\n",
        "\n",
        "print(\"Weekend Sales for Stores Open on All Weekdays:\")\n",
        "print(weekend_sales)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a0960cde-4ef0-4264-8a6c-74e734a0ea05",
      "metadata": {
        "id": "a0960cde-4ef0-4264-8a6c-74e734a0ea05"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Bar plot for weekend sales\n",
        "plt.bar(weekend_sales.index, weekend_sales.values, color='purple')\n",
        "plt.xlabel('StoreID')\n",
        "plt.ylabel('Weekend Sales')\n",
        "plt.title('Weekend Sales for Stores Open on All Weekdays')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9bce72cf-a37a-424a-ac7c-c235debb0b7d",
      "metadata": {
        "id": "9bce72cf-a37a-424a-ac7c-c235debb0b7d"
      },
      "source": [
        "### Check how the assortment type affects sales\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fb63578e-7064-400d-a43d-0880b57a3b03",
      "metadata": {
        "id": "fb63578e-7064-400d-a43d-0880b57a3b03",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "262367d2-9a2c-4a7b-a003-0f0c8bd7a32a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['a', 'c', 'b'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ],
      "source": [
        "store['Assortment'].unique()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bcc83d33-0d31-4af7-ad9c-c29d50fad4cc",
      "metadata": {
        "id": "bcc83d33-0d31-4af7-ad9c-c29d50fad4cc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "083b5c7b-1ba2-4f7e-b967-20e2a492d202"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
              "0      1          5  2015-07-31   5263        555     1      1            0   \n",
              "1      2          5  2015-07-31   6064        625     1      1            0   \n",
              "2      3          5  2015-07-31   8314        821     1      1            0   \n",
              "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
              "4      5          5  2015-07-31   4822        559     1      1            0   \n",
              "\n",
              "   SchoolHoliday  Store StoreType Assortment  CompetitionDistance  \\\n",
              "0              1    1.0         c          a               1270.0   \n",
              "1              1    2.0         a          a                570.0   \n",
              "2              1    3.0         a          a              14130.0   \n",
              "3              1    4.0         c          c                620.0   \n",
              "4              1    5.0         a          a              29910.0   \n",
              "\n",
              "   CompetitionOpenSinceMonth  CompetitionOpenSinceYear  Promo2  \\\n",
              "0                        9.0                    2008.0     0.0   \n",
              "1                       11.0                    2007.0     1.0   \n",
              "2                       12.0                    2006.0     1.0   \n",
              "3                        9.0                    2009.0     0.0   \n",
              "4                        4.0                    2015.0     0.0   \n",
              "\n",
              "   Promo2SinceWeek  Promo2SinceYear    PromoInterval  \n",
              "0              NaN              NaN              NaN  \n",
              "1             13.0           2010.0  Jan,Apr,Jul,Oct  \n",
              "2             14.0           2011.0  Jan,Apr,Jul,Oct  \n",
              "3              NaN              NaN              NaN  \n",
              "4              NaN              NaN              NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3c1c413a-29dd-4504-8b71-326003b7a248\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "      <th>Store</th>\n",
              "      <th>StoreType</th>\n",
              "      <th>Assortment</th>\n",
              "      <th>CompetitionDistance</th>\n",
              "      <th>CompetitionOpenSinceMonth</th>\n",
              "      <th>CompetitionOpenSinceYear</th>\n",
              "      <th>Promo2</th>\n",
              "      <th>Promo2SinceWeek</th>\n",
              "      <th>Promo2SinceYear</th>\n",
              "      <th>PromoInterval</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5263</td>\n",
              "      <td>555</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>c</td>\n",
              "      <td>a</td>\n",
              "      <td>1270.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2008.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6064</td>\n",
              "      <td>625</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>570.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>2007.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8314</td>\n",
              "      <td>821</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>14130.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>2006.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>13995</td>\n",
              "      <td>1498</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "      <td>c</td>\n",
              "      <td>c</td>\n",
              "      <td>620.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>4822</td>\n",
              "      <td>559</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>29910.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2015.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c1c413a-29dd-4504-8b71-326003b7a248')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3c1c413a-29dd-4504-8b71-326003b7a248 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3c1c413a-29dd-4504-8b71-326003b7a248');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3275c00a-4d76-488a-b322-3407972ec411\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3275c00a-4d76-488a-b322-3407972ec411')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3275c00a-4d76-488a-b322-3407972ec411 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ],
      "source": [
        "df_new=pd.concat([train,store],axis=1)\n",
        "df_new.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d711cb0f-1e44-4c42-9e0f-891fa72fcf1c",
      "metadata": {
        "id": "d711cb0f-1e44-4c42-9e0f-891fa72fcf1c"
      },
      "outputs": [],
      "source": [
        "df_3=df_new.copy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9827edd3-16dc-49d9-aa5f-dc5c9155f2ef",
      "metadata": {
        "id": "9827edd3-16dc-49d9-aa5f-dc5c9155f2ef",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b668b102-6417-4488-ff18-213907e78b06"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average Sales by Assortment Type:\n",
            "Assortment\n",
            "a     8366.229342\n",
            "b    10985.111111\n",
            "c     9843.473684\n",
            "Name: Sales, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# Asssortment type affect the sales\n",
        "average_sales_by_assortment = df_3.groupby('Assortment')['Sales'].mean()\n",
        "\n",
        "print(\"Average Sales by Assortment Type:\")\n",
        "print(average_sales_by_assortment)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2cdb5f84-0b08-49c8-a2bc-3f555f23f463",
      "metadata": {
        "id": "2cdb5f84-0b08-49c8-a2bc-3f555f23f463",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "outputId": "f503683b-c136-4bae-c3f8-88436c6956dc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Average Sales')"
            ]
          },
          "metadata": {},
          "execution_count": 61
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "average_sales_by_assortment.plot(kind='bar', color='magenta')\n",
        "plt.title('Average Sales by Assortment Type')\n",
        "plt.xlabel('Assortment Type')\n",
        "plt.ylabel('Average Sales')\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3dbf5e13-c8e0-4e20-860d-807cfc763a6f",
      "metadata": {
        "id": "3dbf5e13-c8e0-4e20-860d-807cfc763a6f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ce1f2dd4-19a4-4cec-a6ca-4390332df15a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ANOVA F-statistic: nan\n",
            "P-value: nan\n",
            "There are no significant differences in sales between assortment types.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_stats_py.py:4133: DegenerateDataWarning: at least one input has length 0\n",
            "  warnings.warn(stats.DegenerateDataWarning('at least one input '\n"
          ]
        }
      ],
      "source": [
        "# Statical Analyze\n",
        "\n",
        "from scipy.stats import f_oneway\n",
        "assortment_types = df_3['Assortment'].unique()\n",
        "assortment_groups = [df_3[df_3['Assortment'] == assortment]['Sales'] for assortment in assortment_types]\n",
        "\n",
        "# ANOVA\n",
        "f_stat, p_value = f_oneway(*assortment_groups)\n",
        "\n",
        "print(\"ANOVA F-statistic:\", f_stat)\n",
        "print(\"P-value:\", p_value)\n",
        "\n",
        "if p_value < 0.05:\n",
        "    print(\"There are significant differences in sales between assortment types.\")\n",
        "else:\n",
        "    print(\"There are no significant differences in sales between assortment types.\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cd6b39c5-7c3c-42df-ad26-0b8d7cbea7d4",
      "metadata": {
        "id": "cd6b39c5-7c3c-42df-ad26-0b8d7cbea7d4"
      },
      "source": [
        "### How does the distance to the next competitor affect sales? What if the store and its competitors all happen to be in city centres, does the distance matter in that case?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e975be80-6e70-4b30-9dcb-01020a25d37b",
      "metadata": {
        "id": "e975be80-6e70-4b30-9dcb-01020a25d37b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "80a581b9-b2a1-4f5f-f507-75ad5c227bae"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count     1112.000000\n",
              "mean      5404.901079\n",
              "std       7663.174720\n",
              "min         20.000000\n",
              "25%        717.500000\n",
              "50%       2325.000000\n",
              "75%       6882.500000\n",
              "max      75860.000000\n",
              "Name: CompetitionDistance, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ],
      "source": [
        "df_3['CompetitionDistance'].describe()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b7a3ab79-eb26-44e9-8368-18d5a006db25",
      "metadata": {
        "id": "b7a3ab79-eb26-44e9-8368-18d5a006db25",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7eb1083c-7e18-4f42-86f1-4d1ab7b04ac1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation between CompetitionDistance and Sales: 0.004085248059166656\n"
          ]
        }
      ],
      "source": [
        "# Analyze effect of CompetitionDistance on sales\n",
        "\n",
        "# correlation coefficient\n",
        "correlation_distance = df_3['CompetitionDistance'].corr(df_3['Sales'])\n",
        "\n",
        "print(\"Correlation between CompetitionDistance and Sales:\", correlation_distance)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "16b5b211-0d1d-444d-8532-300a7e109521",
      "metadata": {
        "id": "16b5b211-0d1d-444d-8532-300a7e109521",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "1516ab9e-eb2a-47f5-c717-1307bbd8f8e7"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "sns.scatterplot(x='CompetitionDistance', y='Sales', data=df_3)\n",
        "plt.title('CompetitionDistance vs. Sales')\n",
        "plt.xlabel('CompetitionDistance')\n",
        "plt.ylabel('Sales')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "af3e0435-016c-483e-834f-68479a55b054",
      "metadata": {
        "id": "af3e0435-016c-483e-834f-68479a55b054"
      },
      "source": [
        "### How does the opening or reopening of new competitors affect stores? Check for stores with NA as competitor distance but later on has values for competitor distance\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fcff0cb6-11f9-45b7-be2a-2c3831225c6c",
      "metadata": {
        "id": "fcff0cb6-11f9-45b7-be2a-2c3831225c6c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "a0428672-51fb-4edc-91b2-961a1fa28659"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
              "0       1          5  2015-07-31   5263        555     1      1            0   \n",
              "1       2          5  2015-07-31   6064        625     1      1            0   \n",
              "2       3          5  2015-07-31   8314        821     1      1            0   \n",
              "3       4          5  2015-07-31  13995       1498     1      1            0   \n",
              "4       5          5  2015-07-31   4822        559     1      1            0   \n",
              "5       6          5  2015-07-31   5651        589     1      1            0   \n",
              "6       7          5  2015-07-31  15344       1414     1      1            0   \n",
              "7       8          5  2015-07-31   8492        833     1      1            0   \n",
              "8       9          5  2015-07-31   8565        687     1      1            0   \n",
              "9      10          5  2015-07-31   7185        681     1      1            0   \n",
              "10     11          5  2015-07-31  10457       1236     1      1            0   \n",
              "11     12          5  2015-07-31   8959        962     1      1            0   \n",
              "12     13          5  2015-07-31   8821        568     1      1            0   \n",
              "13     14          5  2015-07-31   6544        710     1      1            0   \n",
              "14     15          5  2015-07-31   9191        766     1      1            0   \n",
              "15     16          5  2015-07-31  10231        979     1      1            0   \n",
              "16     17          5  2015-07-31   8430        946     1      1            0   \n",
              "17     18          5  2015-07-31  10071        936     1      1            0   \n",
              "18     19          5  2015-07-31   8234        718     1      1            0   \n",
              "19     20          5  2015-07-31   9593        974     1      1            0   \n",
              "\n",
              "    SchoolHoliday  Store StoreType Assortment  CompetitionDistance  \\\n",
              "0               1    1.0         c          a               1270.0   \n",
              "1               1    2.0         a          a                570.0   \n",
              "2               1    3.0         a          a              14130.0   \n",
              "3               1    4.0         c          c                620.0   \n",
              "4               1    5.0         a          a              29910.0   \n",
              "5               1    6.0         a          a                310.0   \n",
              "6               1    7.0         a          c              24000.0   \n",
              "7               1    8.0         a          a               7520.0   \n",
              "8               1    9.0         a          c               2030.0   \n",
              "9               1   10.0         a          a               3160.0   \n",
              "10              1   11.0         a          c                960.0   \n",
              "11              1   12.0         a          c               1070.0   \n",
              "12              0   13.0         d          a                310.0   \n",
              "13              1   14.0         a          a               1300.0   \n",
              "14              1   15.0         d          c               4110.0   \n",
              "15              1   16.0         a          c               3270.0   \n",
              "16              1   17.0         a          a                 50.0   \n",
              "17              1   18.0         d          c              13840.0   \n",
              "18              1   19.0         a          c               3240.0   \n",
              "19              0   20.0         d          a               2340.0   \n",
              "\n",
              "    CompetitionOpenSinceMonth  CompetitionOpenSinceYear  Promo2  \\\n",
              "0                         9.0                    2008.0     0.0   \n",
              "1                        11.0                    2007.0     1.0   \n",
              "2                        12.0                    2006.0     1.0   \n",
              "3                         9.0                    2009.0     0.0   \n",
              "4                         4.0                    2015.0     0.0   \n",
              "5                        12.0                    2013.0     0.0   \n",
              "6                         4.0                    2013.0     0.0   \n",
              "7                        10.0                    2014.0     0.0   \n",
              "8                         8.0                    2000.0     0.0   \n",
              "9                         9.0                    2009.0     0.0   \n",
              "10                       11.0                    2011.0     1.0   \n",
              "11                        NaN                       NaN     1.0   \n",
              "12                        NaN                       NaN     1.0   \n",
              "13                        3.0                    2014.0     1.0   \n",
              "14                        3.0                    2010.0     1.0   \n",
              "15                        NaN                       NaN     0.0   \n",
              "16                       12.0                    2005.0     1.0   \n",
              "17                        6.0                    2010.0     1.0   \n",
              "18                        NaN                       NaN     1.0   \n",
              "19                        5.0                    2009.0     1.0   \n",
              "\n",
              "    Promo2SinceWeek  Promo2SinceYear     PromoInterval  \n",
              "0               NaN              NaN               NaN  \n",
              "1              13.0           2010.0   Jan,Apr,Jul,Oct  \n",
              "2              14.0           2011.0   Jan,Apr,Jul,Oct  \n",
              "3               NaN              NaN               NaN  \n",
              "4               NaN              NaN               NaN  \n",
              "5               NaN              NaN               NaN  \n",
              "6               NaN              NaN               NaN  \n",
              "7               NaN              NaN               NaN  \n",
              "8               NaN              NaN               NaN  \n",
              "9               NaN              NaN               NaN  \n",
              "10              1.0           2012.0   Jan,Apr,Jul,Oct  \n",
              "11             13.0           2010.0   Jan,Apr,Jul,Oct  \n",
              "12             45.0           2009.0   Feb,May,Aug,Nov  \n",
              "13             40.0           2011.0   Jan,Apr,Jul,Oct  \n",
              "14             14.0           2011.0   Jan,Apr,Jul,Oct  \n",
              "15              NaN              NaN               NaN  \n",
              "16             26.0           2010.0   Jan,Apr,Jul,Oct  \n",
              "17             14.0           2012.0   Jan,Apr,Jul,Oct  \n",
              "18             22.0           2011.0  Mar,Jun,Sept,Dec  \n",
              "19             40.0           2014.0   Jan,Apr,Jul,Oct  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0afcc347-a042-4904-8bbf-57d70bb05610\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "      <th>Store</th>\n",
              "      <th>StoreType</th>\n",
              "      <th>Assortment</th>\n",
              "      <th>CompetitionDistance</th>\n",
              "      <th>CompetitionOpenSinceMonth</th>\n",
              "      <th>CompetitionOpenSinceYear</th>\n",
              "      <th>Promo2</th>\n",
              "      <th>Promo2SinceWeek</th>\n",
              "      <th>Promo2SinceYear</th>\n",
              "      <th>PromoInterval</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5263</td>\n",
              "      <td>555</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>c</td>\n",
              "      <td>a</td>\n",
              "      <td>1270.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2008.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6064</td>\n",
              "      <td>625</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>570.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>2007.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8314</td>\n",
              "      <td>821</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>14130.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>2006.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>13995</td>\n",
              "      <td>1498</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "      <td>c</td>\n",
              "      <td>c</td>\n",
              "      <td>620.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>4822</td>\n",
              "      <td>559</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>29910.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2015.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5651</td>\n",
              "      <td>589</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>310.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>2013.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>15344</td>\n",
              "      <td>1414</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>7.0</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>24000.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2013.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8492</td>\n",
              "      <td>833</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>8.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>7520.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8565</td>\n",
              "      <td>687</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.0</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>2030.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>7185</td>\n",
              "      <td>681</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>10.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>3160.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10457</td>\n",
              "      <td>1236</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>11.0</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>960.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2012.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>12</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8959</td>\n",
              "      <td>962</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>12.0</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>1070.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>13</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8821</td>\n",
              "      <td>568</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>d</td>\n",
              "      <td>a</td>\n",
              "      <td>310.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>Feb,May,Aug,Nov</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>14</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6544</td>\n",
              "      <td>710</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>14.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>1300.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>15</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>9191</td>\n",
              "      <td>766</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>15.0</td>\n",
              "      <td>d</td>\n",
              "      <td>c</td>\n",
              "      <td>4110.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>16</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10231</td>\n",
              "      <td>979</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>16.0</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>3270.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>17</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8430</td>\n",
              "      <td>946</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>17.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>50.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>2005.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>18</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10071</td>\n",
              "      <td>936</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>18.0</td>\n",
              "      <td>d</td>\n",
              "      <td>c</td>\n",
              "      <td>13840.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2012.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>19</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8234</td>\n",
              "      <td>718</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>19.0</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>3240.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>Mar,Jun,Sept,Dec</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>9593</td>\n",
              "      <td>974</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>d</td>\n",
              "      <td>a</td>\n",
              "      <td>2340.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0afcc347-a042-4904-8bbf-57d70bb05610')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0afcc347-a042-4904-8bbf-57d70bb05610 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0afcc347-a042-4904-8bbf-57d70bb05610');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a7d0864f-dad4-48b7-8893-f52b5b91ef05\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a7d0864f-dad4-48b7-8893-f52b5b91ef05')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a7d0864f-dad4-48b7-8893-f52b5b91ef05 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ],
      "source": [
        "df_6=df_new.head(1115).copy()\n",
        "df_6.head(20)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fdbbe8c0-8225-4763-ba11-246b3d3fe0d2",
      "metadata": {
        "id": "fdbbe8c0-8225-4763-ba11-246b3d3fe0d2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 216
        },
        "outputId": "34251848-4496-4b38-b168-7cfd9e3e7dd9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
              "290    291          5  2015-07-31  10052        973     1      1            0   \n",
              "621    622          5  2015-07-31   6306        540     1      1            0   \n",
              "878    879          5  2015-07-31   6000        466     1      1            0   \n",
              "\n",
              "     SchoolHoliday  Store StoreType Assortment  CompetitionDistance  \\\n",
              "290              1  291.0         d          a                  NaN   \n",
              "621              1  622.0         a          c                  NaN   \n",
              "878              0  879.0         d          a                  NaN   \n",
              "\n",
              "     CompetitionOpenSinceMonth  CompetitionOpenSinceYear  Promo2  \\\n",
              "290                        NaN                       NaN     0.0   \n",
              "621                        NaN                       NaN     0.0   \n",
              "878                        NaN                       NaN     1.0   \n",
              "\n",
              "     Promo2SinceWeek  Promo2SinceYear    PromoInterval  \n",
              "290              NaN              NaN              NaN  \n",
              "621              NaN              NaN              NaN  \n",
              "878              5.0           2013.0  Feb,May,Aug,Nov  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fc221d22-b301-4ff1-a0a3-c8714aa3d9ce\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "      <th>Store</th>\n",
              "      <th>StoreType</th>\n",
              "      <th>Assortment</th>\n",
              "      <th>CompetitionDistance</th>\n",
              "      <th>CompetitionOpenSinceMonth</th>\n",
              "      <th>CompetitionOpenSinceYear</th>\n",
              "      <th>Promo2</th>\n",
              "      <th>Promo2SinceWeek</th>\n",
              "      <th>Promo2SinceYear</th>\n",
              "      <th>PromoInterval</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>290</th>\n",
              "      <td>291</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10052</td>\n",
              "      <td>973</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>291.0</td>\n",
              "      <td>d</td>\n",
              "      <td>a</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>621</th>\n",
              "      <td>622</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6306</td>\n",
              "      <td>540</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>622.0</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>878</th>\n",
              "      <td>879</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6000</td>\n",
              "      <td>466</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>879.0</td>\n",
              "      <td>d</td>\n",
              "      <td>a</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2013.0</td>\n",
              "      <td>Feb,May,Aug,Nov</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc221d22-b301-4ff1-a0a3-c8714aa3d9ce')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fc221d22-b301-4ff1-a0a3-c8714aa3d9ce button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fc221d22-b301-4ff1-a0a3-c8714aa3d9ce');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c1bf4f47-92f9-4031-acd8-46bdab5a3758\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c1bf4f47-92f9-4031-acd8-46bdab5a3758')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c1bf4f47-92f9-4031-acd8-46bdab5a3758 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_a5846ebd-ea59-46b1-bc39-3a0b0b941992\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('stores_with_na')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a5846ebd-ea59-46b1-bc39-3a0b0b941992 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('stores_with_na');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ],
      "source": [
        "# Filter stores with missing values\n",
        "stores_with_na = df_6[df_6['CompetitionDistance'].isna()]\n",
        "\n",
        "stores_with_na"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4dff2a23-fa73-42c1-871b-d0865210bbb9",
      "metadata": {
        "id": "4dff2a23-fa73-42c1-871b-d0865210bbb9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "edb6d2c3-43b1-4af8-85af-55504273ca58"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stores with missing values that later have values:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
              "0       1          5  2015-07-31   5263        555     1      1            0   \n",
              "1       2          5  2015-07-31   6064        625     1      1            0   \n",
              "2       3          5  2015-07-31   8314        821     1      1            0   \n",
              "3       4          5  2015-07-31  13995       1498     1      1            0   \n",
              "4       5          5  2015-07-31   4822        559     1      1            0   \n",
              "5       6          5  2015-07-31   5651        589     1      1            0   \n",
              "6       7          5  2015-07-31  15344       1414     1      1            0   \n",
              "7       8          5  2015-07-31   8492        833     1      1            0   \n",
              "8       9          5  2015-07-31   8565        687     1      1            0   \n",
              "9      10          5  2015-07-31   7185        681     1      1            0   \n",
              "10     11          5  2015-07-31  10457       1236     1      1            0   \n",
              "11     12          5  2015-07-31   8959        962     1      1            0   \n",
              "12     13          5  2015-07-31   8821        568     1      1            0   \n",
              "13     14          5  2015-07-31   6544        710     1      1            0   \n",
              "14     15          5  2015-07-31   9191        766     1      1            0   \n",
              "15     16          5  2015-07-31  10231        979     1      1            0   \n",
              "16     17          5  2015-07-31   8430        946     1      1            0   \n",
              "17     18          5  2015-07-31  10071        936     1      1            0   \n",
              "18     19          5  2015-07-31   8234        718     1      1            0   \n",
              "19     20          5  2015-07-31   9593        974     1      1            0   \n",
              "20     21          5  2015-07-31   9515        682     1      1            0   \n",
              "21     22          5  2015-07-31   6566        633     1      1            0   \n",
              "22     23          5  2015-07-31   7273        560     1      1            0   \n",
              "23     24          5  2015-07-31  14190       1082     1      1            0   \n",
              "24     25          5  2015-07-31  14180       1586     1      1            0   \n",
              "25     26          5  2015-07-31   7818        611     1      1            0   \n",
              "26     27          5  2015-07-31  13213       1263     1      1            0   \n",
              "27     28          5  2015-07-31   7301        663     1      1            0   \n",
              "28     29          5  2015-07-31   9411        737     1      1            0   \n",
              "29     30          5  2015-07-31   4776        625     1      1            0   \n",
              "\n",
              "    SchoolHoliday  Store StoreType Assortment  CompetitionDistance  \\\n",
              "0               1    1.0         c          a               1270.0   \n",
              "1               1    2.0         a          a                570.0   \n",
              "2               1    3.0         a          a              14130.0   \n",
              "3               1    4.0         c          c                620.0   \n",
              "4               1    5.0         a          a              29910.0   \n",
              "5               1    6.0         a          a                310.0   \n",
              "6               1    7.0         a          c              24000.0   \n",
              "7               1    8.0         a          a               7520.0   \n",
              "8               1    9.0         a          c               2030.0   \n",
              "9               1   10.0         a          a               3160.0   \n",
              "10              1   11.0         a          c                960.0   \n",
              "11              1   12.0         a          c               1070.0   \n",
              "12              0   13.0         d          a                310.0   \n",
              "13              1   14.0         a          a               1300.0   \n",
              "14              1   15.0         d          c               4110.0   \n",
              "15              1   16.0         a          c               3270.0   \n",
              "16              1   17.0         a          a                 50.0   \n",
              "17              1   18.0         d          c              13840.0   \n",
              "18              1   19.0         a          c               3240.0   \n",
              "19              0   20.0         d          a               2340.0   \n",
              "20              1   21.0         c          c                550.0   \n",
              "21              0   22.0         a          a               1040.0   \n",
              "22              1   23.0         d          a               4060.0   \n",
              "23              1   24.0         a          c               4590.0   \n",
              "24              1   25.0         c          a                430.0   \n",
              "25              1   26.0         d          a               2300.0   \n",
              "26              1   27.0         a          a                 60.0   \n",
              "27              1   28.0         a          a               1200.0   \n",
              "28              1   29.0         d          c               2170.0   \n",
              "29              1   30.0         a          a                 40.0   \n",
              "\n",
              "    CompetitionOpenSinceMonth  CompetitionOpenSinceYear  Promo2  \\\n",
              "0                         9.0                    2008.0     0.0   \n",
              "1                        11.0                    2007.0     1.0   \n",
              "2                        12.0                    2006.0     1.0   \n",
              "3                         9.0                    2009.0     0.0   \n",
              "4                         4.0                    2015.0     0.0   \n",
              "5                        12.0                    2013.0     0.0   \n",
              "6                         4.0                    2013.0     0.0   \n",
              "7                        10.0                    2014.0     0.0   \n",
              "8                         8.0                    2000.0     0.0   \n",
              "9                         9.0                    2009.0     0.0   \n",
              "10                       11.0                    2011.0     1.0   \n",
              "11                        NaN                       NaN     1.0   \n",
              "12                        NaN                       NaN     1.0   \n",
              "13                        3.0                    2014.0     1.0   \n",
              "14                        3.0                    2010.0     1.0   \n",
              "15                        NaN                       NaN     0.0   \n",
              "16                       12.0                    2005.0     1.0   \n",
              "17                        6.0                    2010.0     1.0   \n",
              "18                        NaN                       NaN     1.0   \n",
              "19                        5.0                    2009.0     1.0   \n",
              "20                       10.0                    1999.0     1.0   \n",
              "21                        NaN                       NaN     1.0   \n",
              "22                        8.0                    2005.0     0.0   \n",
              "23                        3.0                    2000.0     1.0   \n",
              "24                        4.0                    2003.0     0.0   \n",
              "25                        NaN                       NaN     0.0   \n",
              "26                        1.0                    2005.0     1.0   \n",
              "27                       10.0                    2014.0     1.0   \n",
              "28                        NaN                       NaN     0.0   \n",
              "29                        2.0                    2014.0     1.0   \n",
              "\n",
              "    Promo2SinceWeek  Promo2SinceYear     PromoInterval  \n",
              "0               NaN              NaN               NaN  \n",
              "1              13.0           2010.0   Jan,Apr,Jul,Oct  \n",
              "2              14.0           2011.0   Jan,Apr,Jul,Oct  \n",
              "3               NaN              NaN               NaN  \n",
              "4               NaN              NaN               NaN  \n",
              "5               NaN              NaN               NaN  \n",
              "6               NaN              NaN               NaN  \n",
              "7               NaN              NaN               NaN  \n",
              "8               NaN              NaN               NaN  \n",
              "9               NaN              NaN               NaN  \n",
              "10              1.0           2012.0   Jan,Apr,Jul,Oct  \n",
              "11             13.0           2010.0   Jan,Apr,Jul,Oct  \n",
              "12             45.0           2009.0   Feb,May,Aug,Nov  \n",
              "13             40.0           2011.0   Jan,Apr,Jul,Oct  \n",
              "14             14.0           2011.0   Jan,Apr,Jul,Oct  \n",
              "15              NaN              NaN               NaN  \n",
              "16             26.0           2010.0   Jan,Apr,Jul,Oct  \n",
              "17             14.0           2012.0   Jan,Apr,Jul,Oct  \n",
              "18             22.0           2011.0  Mar,Jun,Sept,Dec  \n",
              "19             40.0           2014.0   Jan,Apr,Jul,Oct  \n",
              "20             45.0           2009.0   Jan,Apr,Jul,Oct  \n",
              "21             22.0           2012.0   Jan,Apr,Jul,Oct  \n",
              "22              NaN              NaN               NaN  \n",
              "23             40.0           2011.0   Jan,Apr,Jul,Oct  \n",
              "24              NaN              NaN               NaN  \n",
              "25              NaN              NaN               NaN  \n",
              "26              5.0           2011.0   Jan,Apr,Jul,Oct  \n",
              "27              6.0           2015.0  Mar,Jun,Sept,Dec  \n",
              "28              NaN              NaN               NaN  \n",
              "29             10.0           2014.0  Mar,Jun,Sept,Dec  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ce79c755-d1d8-4fad-9017-21334e42f056\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "      <th>Store</th>\n",
              "      <th>StoreType</th>\n",
              "      <th>Assortment</th>\n",
              "      <th>CompetitionDistance</th>\n",
              "      <th>CompetitionOpenSinceMonth</th>\n",
              "      <th>CompetitionOpenSinceYear</th>\n",
              "      <th>Promo2</th>\n",
              "      <th>Promo2SinceWeek</th>\n",
              "      <th>Promo2SinceYear</th>\n",
              "      <th>PromoInterval</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5263</td>\n",
              "      <td>555</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>c</td>\n",
              "      <td>a</td>\n",
              "      <td>1270.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2008.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6064</td>\n",
              "      <td>625</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>570.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>2007.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8314</td>\n",
              "      <td>821</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>14130.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>2006.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>13995</td>\n",
              "      <td>1498</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "      <td>c</td>\n",
              "      <td>c</td>\n",
              "      <td>620.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>4822</td>\n",
              "      <td>559</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>29910.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2015.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5651</td>\n",
              "      <td>589</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>310.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>2013.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>15344</td>\n",
              "      <td>1414</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>7.0</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>24000.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2013.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8492</td>\n",
              "      <td>833</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>8.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>7520.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8565</td>\n",
              "      <td>687</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.0</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>2030.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>7185</td>\n",
              "      <td>681</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>10.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>3160.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10457</td>\n",
              "      <td>1236</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>11.0</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>960.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2012.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>12</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8959</td>\n",
              "      <td>962</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>12.0</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>1070.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>13</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8821</td>\n",
              "      <td>568</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>d</td>\n",
              "      <td>a</td>\n",
              "      <td>310.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>Feb,May,Aug,Nov</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>14</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6544</td>\n",
              "      <td>710</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>14.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>1300.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>15</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>9191</td>\n",
              "      <td>766</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>15.0</td>\n",
              "      <td>d</td>\n",
              "      <td>c</td>\n",
              "      <td>4110.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>16</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10231</td>\n",
              "      <td>979</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>16.0</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>3270.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>17</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8430</td>\n",
              "      <td>946</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>17.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>50.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>2005.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>18</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10071</td>\n",
              "      <td>936</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>18.0</td>\n",
              "      <td>d</td>\n",
              "      <td>c</td>\n",
              "      <td>13840.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2012.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>19</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8234</td>\n",
              "      <td>718</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>19.0</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>3240.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>Mar,Jun,Sept,Dec</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>9593</td>\n",
              "      <td>974</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>d</td>\n",
              "      <td>a</td>\n",
              "      <td>2340.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>21</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>9515</td>\n",
              "      <td>682</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>21.0</td>\n",
              "      <td>c</td>\n",
              "      <td>c</td>\n",
              "      <td>550.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1999.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>22</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6566</td>\n",
              "      <td>633</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>1040.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>2012.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>23</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>7273</td>\n",
              "      <td>560</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>23.0</td>\n",
              "      <td>d</td>\n",
              "      <td>a</td>\n",
              "      <td>4060.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>2005.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>24</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>14190</td>\n",
              "      <td>1082</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>24.0</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>4590.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>25</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>14180</td>\n",
              "      <td>1586</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>25.0</td>\n",
              "      <td>c</td>\n",
              "      <td>a</td>\n",
              "      <td>430.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2003.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>26</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>7818</td>\n",
              "      <td>611</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>26.0</td>\n",
              "      <td>d</td>\n",
              "      <td>a</td>\n",
              "      <td>2300.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>27</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>13213</td>\n",
              "      <td>1263</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>27.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>60.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2005.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>28</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>7301</td>\n",
              "      <td>663</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>28.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>1200.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2015.0</td>\n",
              "      <td>Mar,Jun,Sept,Dec</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>29</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>9411</td>\n",
              "      <td>737</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>29.0</td>\n",
              "      <td>d</td>\n",
              "      <td>c</td>\n",
              "      <td>2170.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>30</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>4776</td>\n",
              "      <td>625</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>30.0</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>40.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>Mar,Jun,Sept,Dec</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ce79c755-d1d8-4fad-9017-21334e42f056')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ce79c755-d1d8-4fad-9017-21334e42f056 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ce79c755-d1d8-4fad-9017-21334e42f056');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ff34ffaa-b128-4185-ae55-fbc269ed19e0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ff34ffaa-b128-4185-ae55-fbc269ed19e0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ff34ffaa-b128-4185-ae55-fbc269ed19e0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ],
      "source": [
        "# Filter stores that later have values\n",
        "stores_with_values = df_6[~df_6['CompetitionDistance'].isna()]\n",
        "\n",
        "# Display stores with missing values that later have values\n",
        "print(\"Stores with missing values that later have values:\")\n",
        "stores_with_values.head(30)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9517212c-3614-45a1-891b-0a28dfdc7990",
      "metadata": {
        "id": "9517212c-3614-45a1-891b-0a28dfdc7990"
      },
      "outputs": [],
      "source": [
        "df_6 = df_6.loc[:, ~df_6.columns.duplicated()]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "92e48230-b46f-4ce1-a01d-dcb52d6b4af7",
      "metadata": {
        "id": "92e48230-b46f-4ce1-a01d-dcb52d6b4af7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 557
        },
        "outputId": "87004a18-6edc-4dfb-aafc-f204ef812e65"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
              "0      1          5  2015-07-31   5263        555     1      1            0   \n",
              "1      2          5  2015-07-31   6064        625     1      1            0   \n",
              "2      3          5  2015-07-31   8314        821     1      1            0   \n",
              "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
              "4      5          5  2015-07-31   4822        559     1      1            0   \n",
              "5      6          5  2015-07-31   5651        589     1      1            0   \n",
              "6      7          5  2015-07-31  15344       1414     1      1            0   \n",
              "7      8          5  2015-07-31   8492        833     1      1            0   \n",
              "8      9          5  2015-07-31   8565        687     1      1            0   \n",
              "9     10          5  2015-07-31   7185        681     1      1            0   \n",
              "\n",
              "   SchoolHoliday StoreType Assortment  CompetitionDistance  \\\n",
              "0              1         c          a               1270.0   \n",
              "1              1         a          a                570.0   \n",
              "2              1         a          a              14130.0   \n",
              "3              1         c          c                620.0   \n",
              "4              1         a          a              29910.0   \n",
              "5              1         a          a                310.0   \n",
              "6              1         a          c              24000.0   \n",
              "7              1         a          a               7520.0   \n",
              "8              1         a          c               2030.0   \n",
              "9              1         a          a               3160.0   \n",
              "\n",
              "   CompetitionOpenSinceMonth  CompetitionOpenSinceYear  Promo2  \\\n",
              "0                        9.0                    2008.0     0.0   \n",
              "1                       11.0                    2007.0     1.0   \n",
              "2                       12.0                    2006.0     1.0   \n",
              "3                        9.0                    2009.0     0.0   \n",
              "4                        4.0                    2015.0     0.0   \n",
              "5                       12.0                    2013.0     0.0   \n",
              "6                        4.0                    2013.0     0.0   \n",
              "7                       10.0                    2014.0     0.0   \n",
              "8                        8.0                    2000.0     0.0   \n",
              "9                        9.0                    2009.0     0.0   \n",
              "\n",
              "   Promo2SinceWeek  Promo2SinceYear    PromoInterval  \n",
              "0              NaN              NaN              NaN  \n",
              "1             13.0           2010.0  Jan,Apr,Jul,Oct  \n",
              "2             14.0           2011.0  Jan,Apr,Jul,Oct  \n",
              "3              NaN              NaN              NaN  \n",
              "4              NaN              NaN              NaN  \n",
              "5              NaN              NaN              NaN  \n",
              "6              NaN              NaN              NaN  \n",
              "7              NaN              NaN              NaN  \n",
              "8              NaN              NaN              NaN  \n",
              "9              NaN              NaN              NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d6ca92f1-e6ac-406a-9b77-4769f1be9ff5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "      <th>StoreType</th>\n",
              "      <th>Assortment</th>\n",
              "      <th>CompetitionDistance</th>\n",
              "      <th>CompetitionOpenSinceMonth</th>\n",
              "      <th>CompetitionOpenSinceYear</th>\n",
              "      <th>Promo2</th>\n",
              "      <th>Promo2SinceWeek</th>\n",
              "      <th>Promo2SinceYear</th>\n",
              "      <th>PromoInterval</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5263</td>\n",
              "      <td>555</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>c</td>\n",
              "      <td>a</td>\n",
              "      <td>1270.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2008.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6064</td>\n",
              "      <td>625</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>570.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>2007.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8314</td>\n",
              "      <td>821</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>14130.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>2006.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>Jan,Apr,Jul,Oct</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>13995</td>\n",
              "      <td>1498</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>c</td>\n",
              "      <td>c</td>\n",
              "      <td>620.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>4822</td>\n",
              "      <td>559</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>29910.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2015.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5651</td>\n",
              "      <td>589</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>310.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>2013.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>15344</td>\n",
              "      <td>1414</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>24000.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2013.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8492</td>\n",
              "      <td>833</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>7520.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8565</td>\n",
              "      <td>687</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>a</td>\n",
              "      <td>c</td>\n",
              "      <td>2030.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>7185</td>\n",
              "      <td>681</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>a</td>\n",
              "      <td>a</td>\n",
              "      <td>3160.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6ca92f1-e6ac-406a-9b77-4769f1be9ff5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d6ca92f1-e6ac-406a-9b77-4769f1be9ff5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d6ca92f1-e6ac-406a-9b77-4769f1be9ff5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9837e36f-66c1-49e1-bb79-2dca851617bb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9837e36f-66c1-49e1-bb79-2dca851617bb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9837e36f-66c1-49e1-bb79-2dca851617bb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ],
      "source": [
        "df_6.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ce7692f8-7b13-4a83-9b6b-44080308a9c9",
      "metadata": {
        "id": "ce7692f8-7b13-4a83-9b6b-44080308a9c9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "efaccf2f-d3c8-419e-8118-bd2d097b1fb0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Int64Index([], dtype='int64')\n",
            "Index([], dtype='object')\n"
          ]
        }
      ],
      "source": [
        "print(df_6.index[df_6.index.duplicated()])\n",
        "\n",
        "print(df_6.columns[df_6.columns.duplicated()])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e3436b03-08b1-47d5-8f7f-012872929f56",
      "metadata": {
        "id": "e3436b03-08b1-47d5-8f7f-012872929f56"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2d95c5a4-7b34-4e1e-879a-49716993f9cd",
      "metadata": {
        "id": "2d95c5a4-7b34-4e1e-879a-49716993f9cd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "outputId": "84656b96-bedd-4481-f26e-49d30be5ee25"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-75-311d5c5fbb12>:4: FutureWarning: reindexing with a non-unique Index is deprecated and will raise in a future version.\n",
            "  initial_sales = stores_with_na[stores_with_na['Store'] == store_id]['Sales'].values\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-75-311d5c5fbb12>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Analyze changes in sales for stores with missing values that later have values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mstore_id\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstores_with_values\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Store'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0minitial_sales\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstores_with_na\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstores_with_na\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Store'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mstore_id\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Sales'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m     \u001b[0mlater_sales\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstores_with_values\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstores_with_values\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Store'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mstore_id\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Sales'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3792\u001b[0m         \u001b[0;31m# Do we have a (boolean) DataFrame?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3793\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3794\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwhere\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3795\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3796\u001b[0m         \u001b[0;31m# Do we have a (boolean) 1d indexer?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    209\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m                     \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnew_arg_name\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_arg_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 211\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    329\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 )\n\u001b[0;32m--> 331\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mwhere\u001b[0;34m(self, cond, other, inplace, axis, level, errors, try_cast)\u001b[0m\n\u001b[1;32m  11921\u001b[0m         \u001b[0mtry_cast\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0mlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mNoDefault\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mno_default\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  11922\u001b[0m     ) -> DataFrame | None:\n\u001b[0;32m> 11923\u001b[0;31m         return super().where(\n\u001b[0m\u001b[1;32m  11924\u001b[0m             \u001b[0mcond\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  11925\u001b[0m             \u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    209\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m                     \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnew_arg_name\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_arg_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 211\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    329\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 )\n\u001b[0;32m--> 331\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mwhere\u001b[0;34m(self, cond, other, inplace, axis, level, errors, try_cast)\u001b[0m\n\u001b[1;32m   9966\u001b[0m             )\n\u001b[1;32m   9967\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 9968\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_where\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcond\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   9969\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   9970\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0moverload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_where\u001b[0;34m(self, cond, other, inplace, axis, level)\u001b[0m\n\u001b[1;32m   9661\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   9662\u001b[0m         \u001b[0mcond\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0mcond\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mcond\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 9663\u001b[0;31m         \u001b[0mcond\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcond\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis_number\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   9664\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   9665\u001b[0m         \u001b[0;31m# try to align with other\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    345\u001b[0m         \u001b[0;34m@\u001b[0m\u001b[0mwraps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    346\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mCallable\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m...\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 347\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    348\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    349\u001b[0m         \u001b[0mkind\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minspect\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mParameter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPOSITIONAL_OR_KEYWORD\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mreindex\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   5203\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"axis\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5204\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"labels\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5205\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5206\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5207\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0moverload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mreindex\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   5287\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5288\u001b[0m         \u001b[0;31m# perform the reindex on the axes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5289\u001b[0;31m         return self._reindex_axes(\n\u001b[0m\u001b[1;32m   5290\u001b[0m             \u001b[0maxes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlimit\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfill_value\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5291\u001b[0m         ).__finalize__(self, method=\"reindex\")\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_reindex_axes\u001b[0;34m(self, axes, level, limit, tolerance, method, fill_value, copy)\u001b[0m\n\u001b[1;32m   4996\u001b[0m         \u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4997\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcolumns\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4998\u001b[0;31m             frame = frame._reindex_columns(\n\u001b[0m\u001b[1;32m   4999\u001b[0m                 \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfill_value\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlimit\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5000\u001b[0m             )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_reindex_columns\u001b[0;34m(self, new_columns, method, copy, level, fill_value, limit, tolerance)\u001b[0m\n\u001b[1;32m   5041\u001b[0m             \u001b[0mnew_columns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlimit\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlimit\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5042\u001b[0m         )\n\u001b[0;32m-> 5043\u001b[0;31m         return self._reindex_with_indexers(\n\u001b[0m\u001b[1;32m   5044\u001b[0m             \u001b[0;34m{\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mnew_columns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5045\u001b[0m             \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_reindex_with_indexers\u001b[0;34m(self, reindexers, fill_value, copy, allow_dups)\u001b[0m\n\u001b[1;32m   5353\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5354\u001b[0m             \u001b[0;31m# TODO: speed up on homogeneous DataFrame objects (see _reindex_multi)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5355\u001b[0;31m             new_data = new_data.reindex_indexer(\n\u001b[0m\u001b[1;32m   5356\u001b[0m                 \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5357\u001b[0m                 \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mreindex_indexer\u001b[0;34m(self, new_axis, indexer, axis, fill_value, allow_dups, copy, only_slice, use_na_proxy)\u001b[0m\n\u001b[1;32m    735\u001b[0m         \u001b[0;31m# some axes don't allow reindexing with dups\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mallow_dups\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 737\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_can_reindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    738\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    739\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_validate_can_reindex\u001b[0;34m(self, indexer)\u001b[0m\n\u001b[1;32m   4314\u001b[0m         \u001b[0;31m# trying to reindex on an axis with duplicates\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4315\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_index_as_unique\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4316\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"cannot reindex on an axis with duplicate labels\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4317\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4318\u001b[0m     def reindex(\n",
            "\u001b[0;31mValueError\u001b[0m: cannot reindex on an axis with duplicate labels"
          ]
        }
      ],
      "source": [
        "# Assuming 'Store_Status' indicates whether a store has been reopened\n",
        "# Analyze changes in sales for stores with missing values that later have values\n",
        "for store_id in stores_with_values['Store']:\n",
        "    initial_sales = stores_with_na[stores_with_na['Store'] == store_id]['Sales'].values\n",
        "    later_sales = stores_with_values[stores_with_values['Store'] == store_id]['Sales'].values\n",
        "\n",
        "    if initial_sales.size > 0 and later_sales.size > 0:\n",
        "        print(f\"Store {store_id}: Initial Sales - {initial_sales[0]}, Later Sales - {later_sales[0]}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fcb8df2b-4357-48bf-809e-b8de199d5b38",
      "metadata": {
        "id": "fcb8df2b-4357-48bf-809e-b8de199d5b38"
      },
      "outputs": [],
      "source": [
        "# Analyze change in sales for these stores\n",
        "\n",
        "for store in stores_with_values['Store']:\n",
        "    initial_sales = stores_with_na[stores_with_na['Store'] == store]['Sales'].values\n",
        "    later_sales = stores_with_values[stores_with_values['Store'] == store]['Sales'].values\n",
        "\n",
        "    if initial_sales.size > 0 and later_sales.size > 0:\n",
        "        print(f\"Store {store}: Initial Sales - {initial_sales[0]}, Later Sales - {later_sales[0]}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "67972c00-72f2-44c6-a0e4-9bfc82089215",
      "metadata": {
        "id": "67972c00-72f2-44c6-a0e4-9bfc82089215"
      },
      "outputs": [],
      "source": [
        "print(df_6.index[df_6.index.duplicated()])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c99fc341-f30b-49db-8ecf-90dc515a9225",
      "metadata": {
        "id": "c99fc341-f30b-49db-8ecf-90dc515a9225"
      },
      "outputs": [],
      "source": [
        "print(df_6.columns[df_6.columns.duplicated()])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2fecb56f-11ac-4690-8717-c163400a8904",
      "metadata": {
        "id": "2fecb56f-11ac-4690-8717-c163400a8904"
      },
      "source": [
        "# Task 2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9b49f72b-a62e-4bb0-95f1-3938cd409215",
      "metadata": {
        "id": "9b49f72b-a62e-4bb0-95f1-3938cd409215",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bd59a6f8-93a5-4aab-a675-6dee066fb515"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Store            0\n",
              "DayOfWeek        0\n",
              "Date             0\n",
              "Sales            0\n",
              "Customers        0\n",
              "Open             0\n",
              "Promo            0\n",
              "StateHoliday     0\n",
              "SchoolHoliday    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ],
      "source": [
        "train.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "88f5cd25-9056-42c0-86e2-21c956bdb98a",
      "metadata": {
        "id": "88f5cd25-9056-42c0-86e2-21c956bdb98a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "a4524df2-e0db-4a05-8f2c-9b3678e11489"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
              "0      1          5  2015-07-31   5263        555     1      1            0   \n",
              "1      2          5  2015-07-31   6064        625     1      1            0   \n",
              "2      3          5  2015-07-31   8314        821     1      1            0   \n",
              "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
              "4      5          5  2015-07-31   4822        559     1      1            0   \n",
              "\n",
              "   SchoolHoliday  \n",
              "0              1  \n",
              "1              1  \n",
              "2              1  \n",
              "3              1  \n",
              "4              1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7c416640-7ffc-49c1-9fec-036c43385c80\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5263</td>\n",
              "      <td>555</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6064</td>\n",
              "      <td>625</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8314</td>\n",
              "      <td>821</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>13995</td>\n",
              "      <td>1498</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>4822</td>\n",
              "      <td>559</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7c416640-7ffc-49c1-9fec-036c43385c80')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7c416640-7ffc-49c1-9fec-036c43385c80 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7c416640-7ffc-49c1-9fec-036c43385c80');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b3cc5d59-a71b-48ff-8b00-8c12c5734d30\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b3cc5d59-a71b-48ff-8b00-8c12c5734d30')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b3cc5d59-a71b-48ff-8b00-8c12c5734d30 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ],
      "source": [
        "train.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f05f804b-f67c-431a-b3ac-9c9abc7f5b91",
      "metadata": {
        "id": "f05f804b-f67c-431a-b3ac-9c9abc7f5b91"
      },
      "outputs": [],
      "source": [
        "df_7=train.copy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7c3db055-e14f-4e50-9b30-e2aa4005626d",
      "metadata": {
        "id": "7c3db055-e14f-4e50-9b30-e2aa4005626d"
      },
      "outputs": [],
      "source": [
        "from datetime import datetime, timedelta\n",
        "df_7['Date'] = pd.to_datetime(df_7['Date'])\n",
        "\n",
        "# Extract weekdays and weekend days\n",
        "df_7['weekday'] = df_7['Date'].dt.dayofweek\n",
        "df_7['is_weekend'] = df_7['weekday'].isin([6, 7]).astype(int)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6fee24ba-715e-4d0a-9a15-ddeb7983bea2",
      "metadata": {
        "id": "6fee24ba-715e-4d0a-9a15-ddeb7983bea2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "0663b049-c962-4d50-8811-7ede762cb0d6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Store  DayOfWeek       Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
              "0       1          5 2015-07-31   5263        555     1      1            0   \n",
              "1       2          5 2015-07-31   6064        625     1      1            0   \n",
              "2       3          5 2015-07-31   8314        821     1      1            0   \n",
              "3       4          5 2015-07-31  13995       1498     1      1            0   \n",
              "4       5          5 2015-07-31   4822        559     1      1            0   \n",
              "5       6          5 2015-07-31   5651        589     1      1            0   \n",
              "6       7          5 2015-07-31  15344       1414     1      1            0   \n",
              "7       8          5 2015-07-31   8492        833     1      1            0   \n",
              "8       9          5 2015-07-31   8565        687     1      1            0   \n",
              "9      10          5 2015-07-31   7185        681     1      1            0   \n",
              "10     11          5 2015-07-31  10457       1236     1      1            0   \n",
              "11     12          5 2015-07-31   8959        962     1      1            0   \n",
              "12     13          5 2015-07-31   8821        568     1      1            0   \n",
              "13     14          5 2015-07-31   6544        710     1      1            0   \n",
              "14     15          5 2015-07-31   9191        766     1      1            0   \n",
              "15     16          5 2015-07-31  10231        979     1      1            0   \n",
              "16     17          5 2015-07-31   8430        946     1      1            0   \n",
              "17     18          5 2015-07-31  10071        936     1      1            0   \n",
              "18     19          5 2015-07-31   8234        718     1      1            0   \n",
              "19     20          5 2015-07-31   9593        974     1      1            0   \n",
              "\n",
              "    SchoolHoliday  weekday  is_weekend  days_to_nearest_holiday  \\\n",
              "0               1        4           0                      941   \n",
              "1               1        4           0                      941   \n",
              "2               1        4           0                      941   \n",
              "3               1        4           0                      941   \n",
              "4               1        4           0                      941   \n",
              "5               1        4           0                      941   \n",
              "6               1        4           0                      941   \n",
              "7               1        4           0                      941   \n",
              "8               1        4           0                      941   \n",
              "9               1        4           0                      941   \n",
              "10              1        4           0                      941   \n",
              "11              1        4           0                      941   \n",
              "12              0        4           0                      941   \n",
              "13              1        4           0                      941   \n",
              "14              1        4           0                      941   \n",
              "15              1        4           0                      941   \n",
              "16              1        4           0                      941   \n",
              "17              1        4           0                      941   \n",
              "18              1        4           0                      941   \n",
              "19              0        4           0                      941   \n",
              "\n",
              "    days_after_nearest_holiday  is_beginning_of_month  is_mid_month  \\\n",
              "0                         -121                      0             0   \n",
              "1                         -121                      0             0   \n",
              "2                         -121                      0             0   \n",
              "3                         -121                      0             0   \n",
              "4                         -121                      0             0   \n",
              "5                         -121                      0             0   \n",
              "6                         -121                      0             0   \n",
              "7                         -121                      0             0   \n",
              "8                         -121                      0             0   \n",
              "9                         -121                      0             0   \n",
              "10                        -121                      0             0   \n",
              "11                        -121                      0             0   \n",
              "12                        -121                      0             0   \n",
              "13                        -121                      0             0   \n",
              "14                        -121                      0             0   \n",
              "15                        -121                      0             0   \n",
              "16                        -121                      0             0   \n",
              "17                        -121                      0             0   \n",
              "18                        -121                      0             0   \n",
              "19                        -121                      0             0   \n",
              "\n",
              "    is_end_of_month  \n",
              "0                 1  \n",
              "1                 1  \n",
              "2                 1  \n",
              "3                 1  \n",
              "4                 1  \n",
              "5                 1  \n",
              "6                 1  \n",
              "7                 1  \n",
              "8                 1  \n",
              "9                 1  \n",
              "10                1  \n",
              "11                1  \n",
              "12                1  \n",
              "13                1  \n",
              "14                1  \n",
              "15                1  \n",
              "16                1  \n",
              "17                1  \n",
              "18                1  \n",
              "19                1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e4cc3780-5dd1-495b-8316-378ad3220938\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "      <th>weekday</th>\n",
              "      <th>is_weekend</th>\n",
              "      <th>days_to_nearest_holiday</th>\n",
              "      <th>days_after_nearest_holiday</th>\n",
              "      <th>is_beginning_of_month</th>\n",
              "      <th>is_mid_month</th>\n",
              "      <th>is_end_of_month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5263</td>\n",
              "      <td>555</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6064</td>\n",
              "      <td>625</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8314</td>\n",
              "      <td>821</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>13995</td>\n",
              "      <td>1498</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>4822</td>\n",
              "      <td>559</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5651</td>\n",
              "      <td>589</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>15344</td>\n",
              "      <td>1414</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8492</td>\n",
              "      <td>833</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8565</td>\n",
              "      <td>687</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>7185</td>\n",
              "      <td>681</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10457</td>\n",
              "      <td>1236</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>12</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8959</td>\n",
              "      <td>962</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>13</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8821</td>\n",
              "      <td>568</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>14</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6544</td>\n",
              "      <td>710</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>15</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>9191</td>\n",
              "      <td>766</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>16</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10231</td>\n",
              "      <td>979</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>17</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8430</td>\n",
              "      <td>946</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>18</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10071</td>\n",
              "      <td>936</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>19</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8234</td>\n",
              "      <td>718</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>9593</td>\n",
              "      <td>974</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4cc3780-5dd1-495b-8316-378ad3220938')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e4cc3780-5dd1-495b-8316-378ad3220938 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e4cc3780-5dd1-495b-8316-378ad3220938');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-76246c96-b6b1-4113-a3b5-f894de07ed01\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-76246c96-b6b1-4113-a3b5-f894de07ed01')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-76246c96-b6b1-4113-a3b5-f894de07ed01 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ],
      "source": [
        "# Extract Number of Days to Holidays and Number of Days after Holiday\n",
        "holidays = [datetime(2013, 1, 1), datetime(2013, 4, 1),datetime(2013, 12, 25),datetime(2013, 12, 26),datetime(2014, 1, 1),datetime(2014, 4, 1),datetime(2014, 12, 25),\n",
        "           datetime(2014, 12, 26),datetime(2015, 1, 1),datetime(2015, 4, 1)]  # Add your holiday dates\n",
        "df_7['days_to_nearest_holiday'] = (df_7['Date'] - min(holidays)).dt.days\n",
        "df_7['days_after_nearest_holiday'] = (max(holidays) - df_7['Date']).dt.days\n",
        "df_7.head(20)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ac107dda-a654-4c2e-a635-4a4e57a6e596",
      "metadata": {
        "id": "ac107dda-a654-4c2e-a635-4a4e57a6e596",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "ef1e1d6a-472f-43d5-c724-b008a3d05630"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Store  DayOfWeek       Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
              "0       1          5 2015-07-31   5263        555     1      1            0   \n",
              "1       2          5 2015-07-31   6064        625     1      1            0   \n",
              "2       3          5 2015-07-31   8314        821     1      1            0   \n",
              "3       4          5 2015-07-31  13995       1498     1      1            0   \n",
              "4       5          5 2015-07-31   4822        559     1      1            0   \n",
              "5       6          5 2015-07-31   5651        589     1      1            0   \n",
              "6       7          5 2015-07-31  15344       1414     1      1            0   \n",
              "7       8          5 2015-07-31   8492        833     1      1            0   \n",
              "8       9          5 2015-07-31   8565        687     1      1            0   \n",
              "9      10          5 2015-07-31   7185        681     1      1            0   \n",
              "10     11          5 2015-07-31  10457       1236     1      1            0   \n",
              "11     12          5 2015-07-31   8959        962     1      1            0   \n",
              "12     13          5 2015-07-31   8821        568     1      1            0   \n",
              "13     14          5 2015-07-31   6544        710     1      1            0   \n",
              "14     15          5 2015-07-31   9191        766     1      1            0   \n",
              "15     16          5 2015-07-31  10231        979     1      1            0   \n",
              "16     17          5 2015-07-31   8430        946     1      1            0   \n",
              "17     18          5 2015-07-31  10071        936     1      1            0   \n",
              "18     19          5 2015-07-31   8234        718     1      1            0   \n",
              "19     20          5 2015-07-31   9593        974     1      1            0   \n",
              "20     21          5 2015-07-31   9515        682     1      1            0   \n",
              "21     22          5 2015-07-31   6566        633     1      1            0   \n",
              "22     23          5 2015-07-31   7273        560     1      1            0   \n",
              "23     24          5 2015-07-31  14190       1082     1      1            0   \n",
              "24     25          5 2015-07-31  14180       1586     1      1            0   \n",
              "25     26          5 2015-07-31   7818        611     1      1            0   \n",
              "26     27          5 2015-07-31  13213       1263     1      1            0   \n",
              "27     28          5 2015-07-31   7301        663     1      1            0   \n",
              "28     29          5 2015-07-31   9411        737     1      1            0   \n",
              "29     30          5 2015-07-31   4776        625     1      1            0   \n",
              "30     31          5 2015-07-31   7248        645     1      1            0   \n",
              "31     32          5 2015-07-31   6395        635     1      1            0   \n",
              "32     33          5 2015-07-31  10789        915     1      1            0   \n",
              "33     34          5 2015-07-31  11144       1162     1      1            0   \n",
              "34     35          5 2015-07-31  12412        777     1      1            0   \n",
              "35     36          5 2015-07-31  12422       1251     1      1            0   \n",
              "36     37          5 2015-07-31   9091        888     1      1            0   \n",
              "37     38          5 2015-07-31   7434        608     1      1            0   \n",
              "38     39          5 2015-07-31   8336        929     1      1            0   \n",
              "39     40          5 2015-07-31   5464        678     1      1            0   \n",
              "40     41          5 2015-07-31   6938        494     1      1            0   \n",
              "41     42          5 2015-07-31  11946       1235     1      1            0   \n",
              "42     43          5 2015-07-31   8096        683     1      1            0   \n",
              "43     44          5 2015-07-31   6670        665     1      1            0   \n",
              "44     45          5 2015-07-31   6301        442     1      1            0   \n",
              "45     46          5 2015-07-31   7628        775     1      1            0   \n",
              "46     47          5 2015-07-31   9379       1021     1      1            0   \n",
              "47     48          5 2015-07-31   3874        390     1      1            0   \n",
              "48     49          5 2015-07-31  10310        666     1      1            0   \n",
              "49     50          5 2015-07-31   5729        441     1      1            0   \n",
              "\n",
              "    SchoolHoliday  weekday  is_weekend  days_to_nearest_holiday  \\\n",
              "0               1        4           0                      941   \n",
              "1               1        4           0                      941   \n",
              "2               1        4           0                      941   \n",
              "3               1        4           0                      941   \n",
              "4               1        4           0                      941   \n",
              "5               1        4           0                      941   \n",
              "6               1        4           0                      941   \n",
              "7               1        4           0                      941   \n",
              "8               1        4           0                      941   \n",
              "9               1        4           0                      941   \n",
              "10              1        4           0                      941   \n",
              "11              1        4           0                      941   \n",
              "12              0        4           0                      941   \n",
              "13              1        4           0                      941   \n",
              "14              1        4           0                      941   \n",
              "15              1        4           0                      941   \n",
              "16              1        4           0                      941   \n",
              "17              1        4           0                      941   \n",
              "18              1        4           0                      941   \n",
              "19              0        4           0                      941   \n",
              "20              1        4           0                      941   \n",
              "21              0        4           0                      941   \n",
              "22              1        4           0                      941   \n",
              "23              1        4           0                      941   \n",
              "24              1        4           0                      941   \n",
              "25              1        4           0                      941   \n",
              "26              1        4           0                      941   \n",
              "27              1        4           0                      941   \n",
              "28              1        4           0                      941   \n",
              "29              1        4           0                      941   \n",
              "30              1        4           0                      941   \n",
              "31              0        4           0                      941   \n",
              "32              1        4           0                      941   \n",
              "33              1        4           0                      941   \n",
              "34              1        4           0                      941   \n",
              "35              0        4           0                      941   \n",
              "36              1        4           0                      941   \n",
              "37              1        4           0                      941   \n",
              "38              1        4           0                      941   \n",
              "39              1        4           0                      941   \n",
              "40              0        4           0                      941   \n",
              "41              1        4           0                      941   \n",
              "42              1        4           0                      941   \n",
              "43              1        4           0                      941   \n",
              "44              1        4           0                      941   \n",
              "45              0        4           0                      941   \n",
              "46              1        4           0                      941   \n",
              "47              1        4           0                      941   \n",
              "48              1        4           0                      941   \n",
              "49              1        4           0                      941   \n",
              "\n",
              "    days_after_nearest_holiday  is_beginning_of_month  is_mid_month  \\\n",
              "0                         -121                      0             0   \n",
              "1                         -121                      0             0   \n",
              "2                         -121                      0             0   \n",
              "3                         -121                      0             0   \n",
              "4                         -121                      0             0   \n",
              "5                         -121                      0             0   \n",
              "6                         -121                      0             0   \n",
              "7                         -121                      0             0   \n",
              "8                         -121                      0             0   \n",
              "9                         -121                      0             0   \n",
              "10                        -121                      0             0   \n",
              "11                        -121                      0             0   \n",
              "12                        -121                      0             0   \n",
              "13                        -121                      0             0   \n",
              "14                        -121                      0             0   \n",
              "15                        -121                      0             0   \n",
              "16                        -121                      0             0   \n",
              "17                        -121                      0             0   \n",
              "18                        -121                      0             0   \n",
              "19                        -121                      0             0   \n",
              "20                        -121                      0             0   \n",
              "21                        -121                      0             0   \n",
              "22                        -121                      0             0   \n",
              "23                        -121                      0             0   \n",
              "24                        -121                      0             0   \n",
              "25                        -121                      0             0   \n",
              "26                        -121                      0             0   \n",
              "27                        -121                      0             0   \n",
              "28                        -121                      0             0   \n",
              "29                        -121                      0             0   \n",
              "30                        -121                      0             0   \n",
              "31                        -121                      0             0   \n",
              "32                        -121                      0             0   \n",
              "33                        -121                      0             0   \n",
              "34                        -121                      0             0   \n",
              "35                        -121                      0             0   \n",
              "36                        -121                      0             0   \n",
              "37                        -121                      0             0   \n",
              "38                        -121                      0             0   \n",
              "39                        -121                      0             0   \n",
              "40                        -121                      0             0   \n",
              "41                        -121                      0             0   \n",
              "42                        -121                      0             0   \n",
              "43                        -121                      0             0   \n",
              "44                        -121                      0             0   \n",
              "45                        -121                      0             0   \n",
              "46                        -121                      0             0   \n",
              "47                        -121                      0             0   \n",
              "48                        -121                      0             0   \n",
              "49                        -121                      0             0   \n",
              "\n",
              "    is_end_of_month  \n",
              "0                 1  \n",
              "1                 1  \n",
              "2                 1  \n",
              "3                 1  \n",
              "4                 1  \n",
              "5                 1  \n",
              "6                 1  \n",
              "7                 1  \n",
              "8                 1  \n",
              "9                 1  \n",
              "10                1  \n",
              "11                1  \n",
              "12                1  \n",
              "13                1  \n",
              "14                1  \n",
              "15                1  \n",
              "16                1  \n",
              "17                1  \n",
              "18                1  \n",
              "19                1  \n",
              "20                1  \n",
              "21                1  \n",
              "22                1  \n",
              "23                1  \n",
              "24                1  \n",
              "25                1  \n",
              "26                1  \n",
              "27                1  \n",
              "28                1  \n",
              "29                1  \n",
              "30                1  \n",
              "31                1  \n",
              "32                1  \n",
              "33                1  \n",
              "34                1  \n",
              "35                1  \n",
              "36                1  \n",
              "37                1  \n",
              "38                1  \n",
              "39                1  \n",
              "40                1  \n",
              "41                1  \n",
              "42                1  \n",
              "43                1  \n",
              "44                1  \n",
              "45                1  \n",
              "46                1  \n",
              "47                1  \n",
              "48                1  \n",
              "49                1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3218cc1d-4a35-43b0-8ea5-11e203f5605b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>Date</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Customers</th>\n",
              "      <th>Open</th>\n",
              "      <th>Promo</th>\n",
              "      <th>StateHoliday</th>\n",
              "      <th>SchoolHoliday</th>\n",
              "      <th>weekday</th>\n",
              "      <th>is_weekend</th>\n",
              "      <th>days_to_nearest_holiday</th>\n",
              "      <th>days_after_nearest_holiday</th>\n",
              "      <th>is_beginning_of_month</th>\n",
              "      <th>is_mid_month</th>\n",
              "      <th>is_end_of_month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5263</td>\n",
              "      <td>555</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6064</td>\n",
              "      <td>625</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8314</td>\n",
              "      <td>821</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>13995</td>\n",
              "      <td>1498</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>4822</td>\n",
              "      <td>559</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5651</td>\n",
              "      <td>589</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>15344</td>\n",
              "      <td>1414</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8492</td>\n",
              "      <td>833</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8565</td>\n",
              "      <td>687</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>7185</td>\n",
              "      <td>681</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10457</td>\n",
              "      <td>1236</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>12</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8959</td>\n",
              "      <td>962</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>13</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8821</td>\n",
              "      <td>568</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>14</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6544</td>\n",
              "      <td>710</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>15</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>9191</td>\n",
              "      <td>766</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>16</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10231</td>\n",
              "      <td>979</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>17</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8430</td>\n",
              "      <td>946</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>18</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10071</td>\n",
              "      <td>936</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>19</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8234</td>\n",
              "      <td>718</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>9593</td>\n",
              "      <td>974</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>21</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>9515</td>\n",
              "      <td>682</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>22</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6566</td>\n",
              "      <td>633</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>23</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>7273</td>\n",
              "      <td>560</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>24</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>14190</td>\n",
              "      <td>1082</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>25</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>14180</td>\n",
              "      <td>1586</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>26</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>7818</td>\n",
              "      <td>611</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>27</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>13213</td>\n",
              "      <td>1263</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>28</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>7301</td>\n",
              "      <td>663</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>29</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>9411</td>\n",
              "      <td>737</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>30</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>4776</td>\n",
              "      <td>625</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>31</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>7248</td>\n",
              "      <td>645</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>32</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6395</td>\n",
              "      <td>635</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>33</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10789</td>\n",
              "      <td>915</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>34</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>11144</td>\n",
              "      <td>1162</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>35</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>12412</td>\n",
              "      <td>777</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>36</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>12422</td>\n",
              "      <td>1251</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>37</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>9091</td>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>38</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>7434</td>\n",
              "      <td>608</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>39</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8336</td>\n",
              "      <td>929</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>40</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5464</td>\n",
              "      <td>678</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>41</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6938</td>\n",
              "      <td>494</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>42</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>11946</td>\n",
              "      <td>1235</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>43</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>8096</td>\n",
              "      <td>683</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>44</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6670</td>\n",
              "      <td>665</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>45</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>6301</td>\n",
              "      <td>442</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>46</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>7628</td>\n",
              "      <td>775</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>47</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>9379</td>\n",
              "      <td>1021</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>48</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>3874</td>\n",
              "      <td>390</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>49</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>10310</td>\n",
              "      <td>666</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>50</td>\n",
              "      <td>5</td>\n",
              "      <td>2015-07-31</td>\n",
              "      <td>5729</td>\n",
              "      <td>441</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>941</td>\n",
              "      <td>-121</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3218cc1d-4a35-43b0-8ea5-11e203f5605b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3218cc1d-4a35-43b0-8ea5-11e203f5605b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3218cc1d-4a35-43b0-8ea5-11e203f5605b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bb949f03-e9c8-46a0-9f53-9a3a52801009\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bb949f03-e9c8-46a0-9f53-9a3a52801009')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bb949f03-e9c8-46a0-9f53-9a3a52801009 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ],
      "source": [
        "# Extract Beginning, Mid, and Ending of Month\n",
        "df_7['is_beginning_of_month']=pd.to_datetime(df_7['Date'])\n",
        "df_7['is_mid_month']=pd.to_datetime(df_7['Date'])\n",
        "df_7['is_end_of_month']=pd.to_datetime(df_7['Date'])\n",
        "\n",
        "df_7['is_beginning_of_month'] = (df_7['Date'].dt.day <= 7).astype(int)\n",
        "df_7['is_mid_month'] = ((df_7['Date'].dt.day > 7) & (df_7['Date'].dt.day <= 21)).astype(int)\n",
        "df_7['is_end_of_month'] = (df_7['Date'].dt.is_month_end).astype(int)\n",
        "df_7.head(50)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip3 --ServerApp.iopub_data_rate_limit=2000000\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 140
        },
        "id": "24kETFyIXWb-",
        "outputId": "4507c2e3-15cb-4fe4-ae77-a17dca7d9290"
      },
      "id": "24kETFyIXWb-",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-84-d9fc96d1f0ee>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    pip3 --ServerApp.iopub_data_rate_limit=2000000\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m cannot assign to expression here. Maybe you meant '==' instead of '='?\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}